
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000017f0  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000013c  000017f0  000017f0  00001844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  0000192c  0000192c  00001980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00001944  00001944  00001998  2**2
                  ALLOC
  4 .debug_abbrev 000004ae  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ad  00000000  00000000  00001e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000012fa  00000000  00000000  000030f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003b0  00000000  00000000  000043f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000ae1  00000000  00000000  000047a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000003f5  00000000  00000000  00005281  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000078  00000000  00000000  00005676  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  000056ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000572e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000006cb  00000000  00000000  0000577e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000011  00000000  00000000  00005e49  2**0
                  CONTENTS, READONLY

Desensamblado de la sección .text:

00000000 <_ftext>:
       0:	98 00 00 00 	xor r0,r0,r0
       4:	d0 00 00 00 	wcsr IE,r0
       8:	78 01 00 00 	mvhi r1,0x0
       c:	38 21 00 00 	ori r1,r1,0x0
      10:	d0 e1 00 00 	wcsr EBA,r1
      14:	f8 00 00 3b 	calli 100 <_crt0>
      18:	34 00 00 00 	nop
      1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
      20:	34 00 00 00 	nop
      24:	34 00 00 00 	nop
      28:	34 00 00 00 	nop
      2c:	34 00 00 00 	nop
      30:	34 00 00 00 	nop
      34:	34 00 00 00 	nop
      38:	34 00 00 00 	nop
      3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
      40:	34 00 00 00 	nop
      44:	34 00 00 00 	nop
      48:	34 00 00 00 	nop
      4c:	34 00 00 00 	nop
      50:	34 00 00 00 	nop
      54:	34 00 00 00 	nop
      58:	34 00 00 00 	nop
      5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
      60:	34 00 00 00 	nop
      64:	34 00 00 00 	nop
      68:	34 00 00 00 	nop
      6c:	34 00 00 00 	nop
      70:	34 00 00 00 	nop
      74:	34 00 00 00 	nop
      78:	34 00 00 00 	nop
      7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
      80:	34 00 00 00 	nop
      84:	34 00 00 00 	nop
      88:	34 00 00 00 	nop
      8c:	34 00 00 00 	nop
      90:	34 00 00 00 	nop
      94:	34 00 00 00 	nop
      98:	34 00 00 00 	nop
      9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
      a0:	34 00 00 00 	nop
      a4:	34 00 00 00 	nop
      a8:	34 00 00 00 	nop
      ac:	34 00 00 00 	nop
      b0:	34 00 00 00 	nop
      b4:	34 00 00 00 	nop
      b8:	34 00 00 00 	nop
      bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
      c0:	5b 9d 00 00 	sw (sp+0),ra
      c4:	f8 00 00 2b 	calli 170 <_save_all>
      c8:	90 40 08 00 	rcsr r1,IP
      cc:	f8 00 04 33 	calli 1198 <irq_handler>
      d0:	78 01 ff ff 	mvhi r1,0xffff
      d4:	38 21 ff ff 	ori r1,r1,0xffff
      d8:	d0 41 00 00 	wcsr IP,r1
      dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
      e0:	34 00 00 00 	nop
      e4:	34 00 00 00 	nop
      e8:	34 00 00 00 	nop
      ec:	34 00 00 00 	nop
      f0:	34 00 00 00 	nop
      f4:	34 00 00 00 	nop
      f8:	34 00 00 00 	nop
      fc:	34 00 00 00 	nop

00000100 <_crt0>:
     100:	78 1c 00 00 	mvhi sp,0x0
     104:	3b 9c 3f fc 	ori sp,sp,0x3ffc
     108:	78 1a 00 00 	mvhi gp,0x0
     10c:	3b 5a 19 50 	ori gp,gp,0x1950
     110:	78 01 00 00 	mvhi r1,0x0
     114:	38 21 19 44 	ori r1,r1,0x1944
     118:	78 03 00 00 	mvhi r3,0x0
     11c:	38 63 19 c8 	ori r3,r3,0x19c8

00000120 <.clearBSS>:
     120:	44 23 00 04 	be r1,r3,130 <.callMain>
     124:	58 20 00 00 	sw (r1+0),r0
     128:	34 21 00 04 	addi r1,r1,4
     12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
     130:	34 01 00 00 	mvi r1,0
     134:	34 02 00 00 	mvi r2,0
     138:	34 03 00 00 	mvi r3,0
     13c:	f8 00 04 00 	calli 113c <main>

00000140 <irq_enable>:
     140:	34 01 00 01 	mvi r1,1
     144:	d0 01 00 00 	wcsr IE,r1
     148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
     14c:	34 01 00 00 	mvi r1,0
     150:	d0 01 00 00 	wcsr IE,r1
     154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
     158:	d0 21 00 00 	wcsr IM,r1
     15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
     160:	90 20 08 00 	rcsr r1,IM
     164:	c3 a0 00 00 	ret

00000168 <jump>:
     168:	c0 20 00 00 	b r1

0000016c <halt>:
     16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
     170:	37 9c ff 80 	addi sp,sp,-128
     174:	5b 81 00 04 	sw (sp+4),r1
     178:	5b 82 00 08 	sw (sp+8),r2
     17c:	5b 83 00 0c 	sw (sp+12),r3
     180:	5b 84 00 10 	sw (sp+16),r4
     184:	5b 85 00 14 	sw (sp+20),r5
     188:	5b 86 00 18 	sw (sp+24),r6
     18c:	5b 87 00 1c 	sw (sp+28),r7
     190:	5b 88 00 20 	sw (sp+32),r8
     194:	5b 89 00 24 	sw (sp+36),r9
     198:	5b 8a 00 28 	sw (sp+40),r10
     19c:	5b 9e 00 78 	sw (sp+120),ea
     1a0:	5b 9f 00 7c 	sw (sp+124),ba
     1a4:	2b 81 00 80 	lw r1,(sp+128)
     1a8:	5b 81 00 74 	sw (sp+116),r1
     1ac:	bb 80 08 00 	mv r1,sp
     1b0:	34 21 00 80 	addi r1,r1,128
     1b4:	5b 81 00 70 	sw (sp+112),r1
     1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
     1bc:	2b 81 00 04 	lw r1,(sp+4)
     1c0:	2b 82 00 08 	lw r2,(sp+8)
     1c4:	2b 83 00 0c 	lw r3,(sp+12)
     1c8:	2b 84 00 10 	lw r4,(sp+16)
     1cc:	2b 85 00 14 	lw r5,(sp+20)
     1d0:	2b 86 00 18 	lw r6,(sp+24)
     1d4:	2b 87 00 1c 	lw r7,(sp+28)
     1d8:	2b 88 00 20 	lw r8,(sp+32)
     1dc:	2b 89 00 24 	lw r9,(sp+36)
     1e0:	2b 8a 00 28 	lw r10,(sp+40)
     1e4:	2b 9d 00 74 	lw ra,(sp+116)
     1e8:	2b 9e 00 78 	lw ea,(sp+120)
     1ec:	2b 9f 00 7c 	lw ba,(sp+124)
     1f0:	2b 9c 00 70 	lw sp,(sp+112)
     1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
     1f8:	bb 80 08 00 	mv r1,sp
     1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
     200:	bb 40 08 00 	mv r1,gp
     204:	c3 a0 00 00 	ret

00000208 <setBit>:
#define    TCounterValueRegL    0x2F << 1
#define SIZEBUFF 10


void setBit(char reg, char mask)
{
     208:	37 9c ff f4 	addi sp,sp,-12
     20c:	5b 8b 00 0c 	sw (sp+12),r11
     210:	5b 8c 00 08 	sw (sp+8),r12
     214:	5b 9d 00 04 	sw (sp+4),ra
     218:	20 2b 00 ff 	andi r11,r1,0xff
	char tmp;
	tmp = spi_read(reg);
     21c:	b9 60 08 00 	mv r1,r11
#define    TCounterValueRegL    0x2F << 1
#define SIZEBUFF 10


void setBit(char reg, char mask)
{
     220:	20 4c 00 ff 	andi r12,r2,0xff
	char tmp;
	tmp = spi_read(reg);
     224:	f8 00 05 34 	calli 16f4 <spi_read>
	spi_write(reg, tmp | mask);   
     228:	b8 2c 10 00 	or r2,r1,r12
     22c:	20 42 00 ff 	andi r2,r2,0xff
     230:	b9 60 08 00 	mv r1,r11
     234:	f8 00 05 43 	calli 1740 <spi_write>
}
     238:	2b 9d 00 04 	lw ra,(sp+4)
     23c:	2b 8b 00 0c 	lw r11,(sp+12)
     240:	2b 8c 00 08 	lw r12,(sp+8)
     244:	37 9c 00 0c 	addi sp,sp,12
     248:	c3 a0 00 00 	ret

0000024c <clearBit>:

void clearBit(char reg, char mask)
{
     24c:	37 9c ff f4 	addi sp,sp,-12
     250:	5b 8b 00 0c 	sw (sp+12),r11
     254:	5b 8c 00 08 	sw (sp+8),r12
     258:	5b 9d 00 04 	sw (sp+4),ra
     25c:	20 2b 00 ff 	andi r11,r1,0xff
	char tmp;
	tmp = spi_read(reg);
     260:	b9 60 08 00 	mv r1,r11
	tmp = spi_read(reg);
	spi_write(reg, tmp | mask);   
}

void clearBit(char reg, char mask)
{
     264:	20 4c 00 ff 	andi r12,r2,0xff
	char tmp;
	tmp = spi_read(reg);
     268:	f8 00 05 23 	calli 16f4 <spi_read>
	spi_write(reg, tmp & (~mask));
     26c:	a5 80 10 00 	not r2,r12
     270:	a0 22 08 00 	and r1,r1,r2
     274:	20 22 00 ff 	andi r2,r1,0xff
     278:	b9 60 08 00 	mv r1,r11
     27c:	f8 00 05 31 	calli 1740 <spi_write>
}
     280:	2b 9d 00 04 	lw ra,(sp+4)
     284:	2b 8b 00 0c 	lw r11,(sp+12)
     288:	2b 8c 00 08 	lw r12,(sp+8)
     28c:	37 9c 00 0c 	addi sp,sp,12
     290:	c3 a0 00 00 	ret

00000294 <initRfidReader>:

void initRfidReader()
{
     294:	37 9c ff fc 	addi sp,sp,-4
     298:	5b 9d 00 04 	sw (sp+4),ra
	//Make Soft Reset
	spi_write(CommandReg, PCD_RESETPHASE);
     29c:	34 01 00 02 	mvi r1,2
     2a0:	34 02 00 0f 	mvi r2,15
     2a4:	f8 00 05 27 	calli 1740 <spi_write>
	while (spi_read(CommandReg) & (1<<4));
     2a8:	34 01 00 02 	mvi r1,2
     2ac:	f8 00 05 12 	calli 16f4 <spi_read>
     2b0:	20 21 00 10 	andi r1,r1,0x10
     2b4:	5c 20 ff fd 	bne r1,r0,2a8 <initRfidReader+0x14>
        //Wait until the PCD finish reseting
	

	spi_write(TModeReg, 0x8D );      //Tauto=1; f(Timer) = 6.78MHz/TPreScaler
     2b8:	34 01 00 54 	mvi r1,84
     2bc:	34 02 00 8d 	mvi r2,141
     2c0:	f8 00 05 20 	calli 1740 <spi_write>
	spi_write( TPrescalerReg, 0x3E );//TModeReg[3..0] + TPrescalerReg
     2c4:	34 01 00 56 	mvi r1,86
     2c8:	34 02 00 3e 	mvi r2,62
     2cc:	f8 00 05 1d 	calli 1740 <spi_write>
	spi_write( TReloadRegL, 0x30 );           
     2d0:	34 01 00 5a 	mvi r1,90
     2d4:	34 02 00 30 	mvi r2,48
     2d8:	f8 00 05 1a 	calli 1740 <spi_write>
	spi_write( TReloadRegH, 0x0 );
     2dc:	34 01 00 58 	mvi r1,88
     2e0:	34 02 00 00 	mvi r2,0
     2e4:	f8 00 05 17 	calli 1740 <spi_write>
	spi_write( TxAutoReg, 0x40 );    //100%ASK
     2e8:	34 01 00 2a 	mvi r1,42
     2ec:	34 02 00 40 	mvi r2,64
     2f0:	f8 00 05 14 	calli 1740 <spi_write>
	spi_write( ModeReg, 0x3D );
     2f4:	34 01 00 22 	mvi r1,34
     2f8:	34 02 00 3d 	mvi r2,61
     2fc:	f8 00 05 11 	calli 1740 <spi_write>

	//AntennaON
	setBit( TxControlReg, 0x03 );
     300:	34 01 00 28 	mvi r1,40
     304:	34 02 00 03 	mvi r2,3
     308:	fb ff ff c0 	calli 208 <setBit>
	
	//FINISH INIT 
}
     30c:	2b 9d 00 04 	lw ra,(sp+4)
     310:	37 9c 00 04 	addi sp,sp,4
     314:	c3 a0 00 00 	ret

00000318 <comparestr>:

char comparestr(char uno, char dos, char tres, char cuatro, char cinco, char seis, char siete, char ocho, char nueve, char diez){
     318:	37 9c ff f4 	addi sp,sp,-12
     31c:	5b 8b 00 0c 	sw (sp+12),r11
     320:	5b 8c 00 08 	sw (sp+8),r12
     324:	5b 8d 00 04 	sw (sp+4),r13
     328:	20 29 00 ff 	andi r9,r1,0xff
     32c:	20 42 00 ff 	andi r2,r2,0xff
	char nueve_4 = 'E';
	char diez_4 = '2';



	if((uno == uno_0) && (dos == dos_0) &&(tres == tres_0) &&(cuatro == cuatro_0) &&(cinco == cinco_0) &&(seis == seis_0) &&(siete == siete_0) &&(ocho == ocho_0) &&(nueve == nueve_0) &&(diez == diez_0)){
     330:	64 4a 00 35 	cmpei r10,r2,53
     334:	65 21 00 32 	cmpei r1,r9,50
	setBit( TxControlReg, 0x03 );
	
	//FINISH INIT 
}

char comparestr(char uno, char dos, char tres, char cuatro, char cinco, char seis, char siete, char ocho, char nueve, char diez){
     338:	20 63 00 ff 	andi r3,r3,0xff
	char nueve_4 = 'E';
	char diez_4 = '2';



	if((uno == uno_0) && (dos == dos_0) &&(tres == tres_0) &&(cuatro == cuatro_0) &&(cinco == cinco_0) &&(seis == seis_0) &&(siete == siete_0) &&(ocho == ocho_0) &&(nueve == nueve_0) &&(diez == diez_0)){
     33c:	a1 41 50 00 	and r10,r10,r1
	setBit( TxControlReg, 0x03 );
	
	//FINISH INIT 
}

char comparestr(char uno, char dos, char tres, char cuatro, char cinco, char seis, char siete, char ocho, char nueve, char diez){
     340:	20 84 00 ff 	andi r4,r4,0xff
     344:	20 a5 00 ff 	andi r5,r5,0xff
     348:	20 c6 00 ff 	andi r6,r6,0xff
     34c:	20 e7 00 ff 	andi r7,r7,0xff
     350:	21 08 00 ff 	andi r8,r8,0xff
     354:	43 8b 00 13 	lbu r11,(sp+19)
     358:	43 8c 00 17 	lbu r12,(sp+23)
	char nueve_4 = 'E';
	char diez_4 = '2';



	if((uno == uno_0) && (dos == dos_0) &&(tres == tres_0) &&(cuatro == cuatro_0) &&(cinco == cinco_0) &&(seis == seis_0) &&(siete == siete_0) &&(ocho == ocho_0) &&(nueve == nueve_0) &&(diez == diez_0)){
     35c:	45 40 00 12 	be r10,r0,3a4 <comparestr+0x8c>
     360:	64 8a 00 32 	cmpei r10,r4,50
     364:	64 61 00 35 	cmpei r1,r3,53
     368:	a1 41 08 00 	and r1,r10,r1
     36c:	44 20 00 0e 	be r1,r0,3a4 <comparestr+0x8c>
     370:	64 ca 00 36 	cmpei r10,r6,54
     374:	64 a1 00 32 	cmpei r1,r5,50
     378:	a1 41 08 00 	and r1,r10,r1
     37c:	44 20 00 0a 	be r1,r0,3a4 <comparestr+0x8c>
     380:	65 0a 00 30 	cmpei r10,r8,48
     384:	64 e1 00 35 	cmpei r1,r7,53
     388:	a1 41 08 00 	and r1,r10,r1
     38c:	44 20 00 06 	be r1,r0,3a4 <comparestr+0x8c>
     390:	65 8d 00 31 	cmpei r13,r12,49
     394:	65 6a 00 30 	cmpei r10,r11,48
	return 'a';
     398:	34 01 00 61 	mvi r1,97
	char nueve_4 = 'E';
	char diez_4 = '2';



	if((uno == uno_0) && (dos == dos_0) &&(tres == tres_0) &&(cuatro == cuatro_0) &&(cinco == cinco_0) &&(seis == seis_0) &&(siete == siete_0) &&(ocho == ocho_0) &&(nueve == nueve_0) &&(diez == diez_0)){
     39c:	a1 aa 50 00 	and r10,r13,r10
     3a0:	5d 40 00 54 	bne r10,r0,4f0 <comparestr+0x1d8>
	return 'a';
	}

	if((uno == uno_1) && (dos == dos_1) &&(tres == tres_1) &&(cuatro == cuatro_1) &&(cinco == cinco_1) &&(seis == seis_1) &&(siete == siete_1) &&(ocho == ocho_1) &&(nueve == nueve_1) &&(diez == diez_1)){
     3a4:	64 41 00 30 	cmpei r1,r2,48
     3a8:	65 2a 00 42 	cmpei r10,r9,66
     3ac:	a0 2a 50 00 	and r10,r1,r10
     3b0:	45 40 00 12 	be r10,r0,3f8 <comparestr+0xe0>
     3b4:	64 8a 00 30 	cmpei r10,r4,48
     3b8:	64 61 00 36 	cmpei r1,r3,54
     3bc:	a1 41 08 00 	and r1,r10,r1
     3c0:	44 20 00 0e 	be r1,r0,3f8 <comparestr+0xe0>
     3c4:	64 ca 00 46 	cmpei r10,r6,70
     3c8:	64 a1 00 31 	cmpei r1,r5,49
     3cc:	a1 41 08 00 	and r1,r10,r1
     3d0:	44 20 00 0a 	be r1,r0,3f8 <comparestr+0xe0>
     3d4:	65 0a 00 42 	cmpei r10,r8,66
     3d8:	64 e1 00 32 	cmpei r1,r7,50
     3dc:	a1 41 08 00 	and r1,r10,r1
     3e0:	44 20 00 06 	be r1,r0,3f8 <comparestr+0xe0>
     3e4:	65 8d 00 34 	cmpei r13,r12,52
     3e8:	65 6a 00 45 	cmpei r10,r11,69
	return 'b';
     3ec:	34 01 00 62 	mvi r1,98

	if((uno == uno_0) && (dos == dos_0) &&(tres == tres_0) &&(cuatro == cuatro_0) &&(cinco == cinco_0) &&(seis == seis_0) &&(siete == siete_0) &&(ocho == ocho_0) &&(nueve == nueve_0) &&(diez == diez_0)){
	return 'a';
	}

	if((uno == uno_1) && (dos == dos_1) &&(tres == tres_1) &&(cuatro == cuatro_1) &&(cinco == cinco_1) &&(seis == seis_1) &&(siete == siete_1) &&(ocho == ocho_1) &&(nueve == nueve_1) &&(diez == diez_1)){
     3f0:	a1 aa 50 00 	and r10,r13,r10
     3f4:	5d 40 00 3f 	bne r10,r0,4f0 <comparestr+0x1d8>
	return 'b';
	}

	if((uno == uno_2) && (dos == dos_2) &&(tres == tres_2) &&(cuatro == cuatro_2) &&(cinco == cinco_2) &&(seis == seis_2) &&(siete == siete_2) &&(ocho == ocho_2) &&(nueve == nueve_2) &&(diez == diez_2)){
     3f8:	64 42 00 42 	cmpei r2,r2,66
     3fc:	65 21 00 38 	cmpei r1,r9,56
     400:	a0 41 08 00 	and r1,r2,r1
     404:	44 20 00 12 	be r1,r0,44c <comparestr+0x134>
     408:	64 8a 00 43 	cmpei r10,r4,67
     40c:	64 61 00 34 	cmpei r1,r3,52
     410:	a1 41 08 00 	and r1,r10,r1
     414:	44 20 00 0e 	be r1,r0,44c <comparestr+0x134>
     418:	64 ca 00 39 	cmpei r10,r6,57
     41c:	64 a1 00 33 	cmpei r1,r5,51
     420:	a1 41 08 00 	and r1,r10,r1
     424:	44 20 00 0a 	be r1,r0,44c <comparestr+0x134>
     428:	65 0a 00 30 	cmpei r10,r8,48
     42c:	64 e1 00 34 	cmpei r1,r7,52
     430:	a1 41 08 00 	and r1,r10,r1
     434:	44 20 00 06 	be r1,r0,44c <comparestr+0x134>
     438:	65 8d 00 45 	cmpei r13,r12,69
     43c:	65 6a 00 42 	cmpei r10,r11,66
	return 'c';
     440:	34 01 00 63 	mvi r1,99

	if((uno == uno_1) && (dos == dos_1) &&(tres == tres_1) &&(cuatro == cuatro_1) &&(cinco == cinco_1) &&(seis == seis_1) &&(siete == siete_1) &&(ocho == ocho_1) &&(nueve == nueve_1) &&(diez == diez_1)){
	return 'b';
	}

	if((uno == uno_2) && (dos == dos_2) &&(tres == tres_2) &&(cuatro == cuatro_2) &&(cinco == cinco_2) &&(seis == seis_2) &&(siete == siete_2) &&(ocho == ocho_2) &&(nueve == nueve_2) &&(diez == diez_2)){
     444:	a1 aa 50 00 	and r10,r13,r10
     448:	5d 40 00 2a 	bne r10,r0,4f0 <comparestr+0x1d8>
	return 'c';
	}

	if((uno == uno_3) && (dos == dos_3) &&(tres == tres_3) &&(cuatro == cuatro_3) &&(cinco == cinco_3) &&(seis == seis_3) &&(siete == siete_3) &&(ocho == ocho_3) &&(nueve == nueve_3) &&(diez == diez_3)){
     44c:	65 21 00 46 	cmpei r1,r9,70
     450:	a0 41 08 00 	and r1,r2,r1
     454:	44 20 00 12 	be r1,r0,49c <comparestr+0x184>
     458:	64 8a 00 34 	cmpei r10,r4,52
     45c:	64 61 00 37 	cmpei r1,r3,55
     460:	a1 41 08 00 	and r1,r10,r1
     464:	44 20 00 0e 	be r1,r0,49c <comparestr+0x184>
     468:	64 ca 00 39 	cmpei r10,r6,57
     46c:	64 a1 00 33 	cmpei r1,r5,51
     470:	a1 41 08 00 	and r1,r10,r1
     474:	44 20 00 0a 	be r1,r0,49c <comparestr+0x184>
     478:	65 0a 00 30 	cmpei r10,r8,48
     47c:	64 e1 00 34 	cmpei r1,r7,52
     480:	a1 41 08 00 	and r1,r10,r1
     484:	44 20 00 06 	be r1,r0,49c <comparestr+0x184>
     488:	65 8d 00 36 	cmpei r13,r12,54
     48c:	65 6a 00 46 	cmpei r10,r11,70
	return 'd';
     490:	34 01 00 64 	mvi r1,100

	if((uno == uno_2) && (dos == dos_2) &&(tres == tres_2) &&(cuatro == cuatro_2) &&(cinco == cinco_2) &&(seis == seis_2) &&(siete == siete_2) &&(ocho == ocho_2) &&(nueve == nueve_2) &&(diez == diez_2)){
	return 'c';
	}

	if((uno == uno_3) && (dos == dos_3) &&(tres == tres_3) &&(cuatro == cuatro_3) &&(cinco == cinco_3) &&(seis == seis_3) &&(siete == siete_3) &&(ocho == ocho_3) &&(nueve == nueve_3) &&(diez == diez_3)){
     494:	a1 aa 50 00 	and r10,r13,r10
     498:	5d 40 00 16 	bne r10,r0,4f0 <comparestr+0x1d8>
	return 'd';
	}

	if((uno == uno_4) && (dos == dos_4) &&(tres == tres_4) &&(cuatro == cuatro_4) &&(cinco == cinco_4) &&(seis == seis_4) &&(siete == siete_4) &&(ocho == ocho_4) &&(nueve == nueve_4) &&(diez == diez_4)){
     49c:	65 29 00 34 	cmpei r9,r9,52
	return 'e';
	}
	return 'f';
     4a0:	34 01 00 66 	mvi r1,102

	if((uno == uno_3) && (dos == dos_3) &&(tres == tres_3) &&(cuatro == cuatro_3) &&(cinco == cinco_3) &&(seis == seis_3) &&(siete == siete_3) &&(ocho == ocho_3) &&(nueve == nueve_3) &&(diez == diez_3)){
	return 'd';
	}

	if((uno == uno_4) && (dos == dos_4) &&(tres == tres_4) &&(cuatro == cuatro_4) &&(cinco == cinco_4) &&(seis == seis_4) &&(siete == siete_4) &&(ocho == ocho_4) &&(nueve == nueve_4) &&(diez == diez_4)){
     4a4:	a0 49 10 00 	and r2,r2,r9
     4a8:	44 40 00 12 	be r2,r0,4f0 <comparestr+0x1d8>
     4ac:	64 84 00 32 	cmpei r4,r4,50
     4b0:	64 63 00 44 	cmpei r3,r3,68
     4b4:	a0 83 18 00 	and r3,r4,r3
     4b8:	44 60 00 0e 	be r3,r0,4f0 <comparestr+0x1d8>
     4bc:	64 c6 00 41 	cmpei r6,r6,65
     4c0:	64 a5 00 33 	cmpei r5,r5,51
     4c4:	a0 c5 28 00 	and r5,r6,r5
     4c8:	44 a0 00 0a 	be r5,r0,4f0 <comparestr+0x1d8>
     4cc:	65 08 00 30 	cmpei r8,r8,48
     4d0:	64 e7 00 34 	cmpei r7,r7,52
     4d4:	a1 07 38 00 	and r7,r8,r7
     4d8:	44 e0 00 06 	be r7,r0,4f0 <comparestr+0x1d8>
     4dc:	65 81 00 32 	cmpei r1,r12,50
     4e0:	65 6b 00 45 	cmpei r11,r11,69
	return 'e';
	}
	return 'f';
     4e4:	34 02 00 66 	mvi r2,102
     4e8:	a0 2b 08 00 	and r1,r1,r11
     4ec:	c8 41 08 00 	sub r1,r2,r1

}
     4f0:	2b 8b 00 0c 	lw r11,(sp+12)
     4f4:	2b 8c 00 08 	lw r12,(sp+8)
     4f8:	2b 8d 00 04 	lw r13,(sp+4)
     4fc:	37 9c 00 0c 	addi sp,sp,12
     500:	c3 a0 00 00 	ret

00000504 <bienvenido>:

char* bienvenido(char a){
	if(a == 'a'){
		return "**Bienvenido admin**";
     504:	78 02 00 00 	mvhi r2,0x0
	}
	return 'f';

}

char* bienvenido(char a){
     508:	20 21 00 ff 	andi r1,r1,0xff
	if(a == 'a'){
     50c:	34 03 00 61 	mvi r3,97
		return "**Bienvenido admin**";
     510:	38 42 17 f0 	ori r2,r2,0x17f0
	return 'f';

}

char* bienvenido(char a){
	if(a == 'a'){
     514:	44 23 00 11 	be r1,r3,558 <bienvenido+0x54>
		return "**Bienvenido admin**";
	}
	if(a == 'b'){
		return "*Bienvenido  admin2*";
     518:	78 02 00 00 	mvhi r2,0x0

char* bienvenido(char a){
	if(a == 'a'){
		return "**Bienvenido admin**";
	}
	if(a == 'b'){
     51c:	34 03 00 62 	mvi r3,98
		return "*Bienvenido  admin2*";
     520:	38 42 18 08 	ori r2,r2,0x1808

char* bienvenido(char a){
	if(a == 'a'){
		return "**Bienvenido admin**";
	}
	if(a == 'b'){
     524:	44 23 00 0d 	be r1,r3,558 <bienvenido+0x54>
		return "*Bienvenido  admin2*";
	}
	if(a == 'c'){
		return "*Bienvenido  Daniel*";
     528:	78 02 00 00 	mvhi r2,0x0
		return "**Bienvenido admin**";
	}
	if(a == 'b'){
		return "*Bienvenido  admin2*";
	}
	if(a == 'c'){
     52c:	34 03 00 63 	mvi r3,99
		return "*Bienvenido  Daniel*";
     530:	38 42 18 20 	ori r2,r2,0x1820
		return "**Bienvenido admin**";
	}
	if(a == 'b'){
		return "*Bienvenido  admin2*";
	}
	if(a == 'c'){
     534:	44 23 00 09 	be r1,r3,558 <bienvenido+0x54>
		return "*Bienvenido  Daniel*";
	}
	if(a == 'd'){
		return "*Bienvenido Joaquin*";
     538:	78 02 00 00 	mvhi r2,0x0
		return "*Bienvenido  admin2*";
	}
	if(a == 'c'){
		return "*Bienvenido  Daniel*";
	}
	if(a == 'd'){
     53c:	34 03 00 64 	mvi r3,100
		return "*Bienvenido Joaquin*";
     540:	38 42 18 38 	ori r2,r2,0x1838
		return "*Bienvenido  admin2*";
	}
	if(a == 'c'){
		return "*Bienvenido  Daniel*";
	}
	if(a == 'd'){
     544:	44 23 00 05 	be r1,r3,558 <bienvenido+0x54>
		return "*Bienvenido Joaquin*";
	}
	if(a == 'e'){
		return "***Bienvenido Jan***";
	}
	return "**Intente de nuevo**";
     548:	78 02 00 00 	mvhi r2,0x0
		return "*Bienvenido  Daniel*";
	}
	if(a == 'd'){
		return "*Bienvenido Joaquin*";
	}
	if(a == 'e'){
     54c:	34 03 00 65 	mvi r3,101
		return "***Bienvenido Jan***";
	}
	return "**Intente de nuevo**";
     550:	38 42 18 68 	ori r2,r2,0x1868
		return "*Bienvenido  Daniel*";
	}
	if(a == 'd'){
		return "*Bienvenido Joaquin*";
	}
	if(a == 'e'){
     554:	44 23 00 03 	be r1,r3,560 <bienvenido+0x5c>
		return "***Bienvenido Jan***";
	}
	return "**Intente de nuevo**";
}
     558:	b8 40 08 00 	mv r1,r2
     55c:	c3 a0 00 00 	ret
	}
	if(a == 'd'){
		return "*Bienvenido Joaquin*";
	}
	if(a == 'e'){
		return "***Bienvenido Jan***";
     560:	78 02 00 00 	mvhi r2,0x0
     564:	38 42 18 50 	ori r2,r2,0x1850
     568:	e3 ff ff fc 	bi 558 <bienvenido+0x54>

0000056c <loop>:
        
}
*/

char loop(char *p)
{
     56c:	37 9c ff b0 	addi sp,sp,-80
     570:	5b 8b 00 4c 	sw (sp+76),r11
     574:	5b 8c 00 48 	sw (sp+72),r12
     578:	5b 8d 00 44 	sw (sp+68),r13
     57c:	5b 8e 00 40 	sw (sp+64),r14
     580:	5b 8f 00 3c 	sw (sp+60),r15
     584:	5b 90 00 38 	sw (sp+56),r16
     588:	5b 91 00 34 	sw (sp+52),r17
     58c:	5b 92 00 30 	sw (sp+48),r18
     590:	5b 93 00 2c 	sw (sp+44),r19
     594:	5b 94 00 28 	sw (sp+40),r20
     598:	5b 95 00 24 	sw (sp+36),r21
     59c:	5b 96 00 20 	sw (sp+32),r22
     5a0:	5b 97 00 1c 	sw (sp+28),r23
     5a4:	5b 98 00 18 	sw (sp+24),r24
     5a8:	5b 99 00 14 	sw (sp+20),r25
     5ac:	5b 9b 00 10 	sw (sp+16),fp
     5b0:	5b 9d 00 0c 	sw (sp+12),ra
		if(i==0){
		uno = secondDigit;
		dos = firstDigit;
		}
		if(i==1){
		tres = secondDigit;
     5b4:	78 0d 00 00 	mvhi r13,0x0
     5b8:	78 0c 00 00 	mvhi r12,0x0
     5bc:	39 ad 0a ac 	ori r13,r13,0xaac
        
}
*/

char loop(char *p)
{
     5c0:	34 0b 00 10 	mvi r11,16
     5c4:	39 8c 18 80 	ori r12,r12,0x1880
	char diez;
        int jj;

	//Begin Testing
        for(jj=0; jj<16; jj++){
		writeStringlcd("*");		
     5c8:	b9 80 08 00 	mv r1,r12
     5cc:	d9 a0 00 00 	call r13
	        msleep(100);
     5d0:	35 6b ff ff 	addi r11,r11,-1
     5d4:	34 01 00 64 	mvi r1,100
     5d8:	f8 00 03 20 	calli 1258 <msleep>
	char nueve;
	char diez;
        int jj;

	//Begin Testing
        for(jj=0; jj<16; jj++){
     5dc:	5d 60 ff fb 	bne r11,r0,5c8 <loop+0x5c>
        }
	
	//IS_CARD
	//REQUEST

	spi_write( BitFramingReg, 0x07 );
     5e0:	34 01 00 1a 	mvi r1,26
     5e4:	34 02 00 07 	mvi r2,7
     5e8:	f8 00 04 56 	calli 1740 <spi_write>

	//TO_CARD
	char irqEn = 0x77;
	//Serial.println(irqEn, HEX);
	spi_write( ComIEnReg, irqEn | 0x80 );
     5ec:	34 01 00 04 	mvi r1,4
     5f0:	34 02 00 f7 	mvi r2,247
     5f4:	f8 00 04 53 	calli 1740 <spi_write>
	clearBit( ComIrqReg, 0x80 );
     5f8:	34 01 00 08 	mvi r1,8
     5fc:	34 02 00 80 	mvi r2,128
     600:	fb ff ff 13 	calli 24c <clearBit>
	setBit( FIFOLevelReg, 0x80 );
     604:	34 01 00 14 	mvi r1,20
     608:	34 02 00 80 	mvi r2,128
     60c:	fb ff fe ff 	calli 208 <setBit>
	spi_write( CommandReg, PCD_IDLE );
     610:	34 01 00 02 	mvi r1,2
     614:	34 02 00 00 	mvi r2,0
     618:	f8 00 04 4a 	calli 1740 <spi_write>
	spi_write( FIFODataReg, 0x26 );   //Escribiendo
     61c:	34 01 00 12 	mvi r1,18
     620:	34 02 00 26 	mvi r2,38
     624:	f8 00 04 47 	calli 1740 <spi_write>
	spi_write( CommandReg, PCD_TRANSCEIVE );
     628:	34 01 00 02 	mvi r1,2
     62c:	34 02 00 0c 	mvi r2,12
     630:	f8 00 04 44 	calli 1740 <spi_write>
	setBit( BitFramingReg, 0x80 );
     634:	34 01 00 1a 	mvi r1,26
     638:	34 02 00 80 	mvi r2,128
     63c:	fb ff fe f3 	calli 208 <setBit>

	char flag = 1;
	while(flag)
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
     640:	34 01 00 08 	mvi r1,8
     644:	f8 00 04 2c 	calli 16f4 <spi_read>
     648:	b8 20 60 00 	mv r12,r1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
     64c:	21 8b 00 01 	andi r11,r12,0x1
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
     650:	34 01 00 01 	mvi r1,1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
     654:	5d 60 00 0a 	bne r11,r0,67c <loop+0x110>
	char n;
	char waitIrq = 0x30;


	char flag = 1;
	while(flag)
     658:	21 8c 00 30 	andi r12,r12,0x30
		if(n & 0x01)
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
     65c:	f8 00 02 ff 	calli 1258 <msleep>
	char n;
	char waitIrq = 0x30;


	char flag = 1;
	while(flag)
     660:	5d 8b 00 09 	bne r12,r11,684 <loop+0x118>
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
     664:	34 01 00 08 	mvi r1,8
     668:	f8 00 04 23 	calli 16f4 <spi_read>
     66c:	b8 20 60 00 	mv r12,r1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
     670:	21 8b 00 01 	andi r11,r12,0x1
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
     674:	34 01 00 01 	mvi r1,1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
     678:	45 60 ff f8 	be r11,r0,658 <loop+0xec>
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
     67c:	34 01 00 01 	mvi r1,1
     680:	f8 00 02 f6 	calli 1258 <msleep>
	}
	
	flag=1;

	clearBit ( BitFramingReg, 0x80 );
     684:	34 02 00 80 	mvi r2,128
     688:	34 01 00 1a 	mvi r1,26
     68c:	fb ff fe f0 	calli 24c <clearBit>
	char lec;
	lec = spi_read( ErrorReg);
     690:	34 01 00 0c 	mvi r1,12
     694:	f8 00 04 18 	calli 16f4 <spi_read>
	

	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
     698:	34 01 00 14 	mvi r1,20
     69c:	f8 00 04 16 	calli 16f4 <spi_read>
     6a0:	b8 20 60 00 	mv r12,r1

	msleep(100);
     6a4:	34 01 00 64 	mvi r1,100
     6a8:	f8 00 02 ec 	calli 1258 <msleep>
	char i=0;
	
	while (i<n)
     6ac:	45 80 00 0d 	be r12,r0,6e0 <loop+0x174>
     6b0:	34 0b 00 00 	mvi r11,0
	{
		lec = spi_read(FIFODataReg);
     6b4:	34 01 00 12 	mvi r1,18
     6b8:	f8 00 04 0f 	calli 16f4 <spi_read>
		msleep(100);
     6bc:	34 01 00 64 	mvi r1,100
     6c0:	f8 00 02 e6 	calli 1258 <msleep>

		msleep(100);
     6c4:	34 01 00 64 	mvi r1,100
     6c8:	f8 00 02 e4 	calli 1258 <msleep>
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;

		msleep(100);		
		i=i+1;
     6cc:	35 6b 00 01 	addi r11,r11,1
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;

		msleep(100);		
     6d0:	34 01 00 64 	mvi r1,100
		i=i+1;
     6d4:	21 6b 00 ff 	andi r11,r11,0xff
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;

		msleep(100);		
     6d8:	f8 00 02 e0 	calli 1258 <msleep>
	n = spi_read(FIFOLevelReg); //leer cantidad de datos

	msleep(100);
	char i=0;
	
	while (i<n)
     6dc:	55 8b ff f6 	bgu r12,r11,6b4 <loop+0x148>
	//FIN IS_CARD

	//READ_CARD_SERIAL

	//ANTICOLL
	spi_write( BitFramingReg, 0x00 );
     6e0:	34 01 00 1a 	mvi r1,26
     6e4:	34 02 00 00 	mvi r2,0
     6e8:	f8 00 04 16 	calli 1740 <spi_write>
	clearBit( Status2Reg, 0x08 );   
     6ec:	34 01 00 10 	mvi r1,16
     6f0:	34 02 00 08 	mvi r2,8
     6f4:	fb ff fe d6 	calli 24c <clearBit>
	
	
	//TO_CARD

	spi_write( ComIEnReg, irqEn | 0x80 );
     6f8:	34 01 00 04 	mvi r1,4
     6fc:	34 02 00 f7 	mvi r2,247
     700:	f8 00 04 10 	calli 1740 <spi_write>
	clearBit( ComIrqReg, 0x80 );
     704:	34 01 00 08 	mvi r1,8
     708:	34 02 00 80 	mvi r2,128
     70c:	fb ff fe d0 	calli 24c <clearBit>
	setBit( FIFOLevelReg, 0x80 );
     710:	34 01 00 14 	mvi r1,20
     714:	34 02 00 80 	mvi r2,128
     718:	fb ff fe bc 	calli 208 <setBit>
	spi_write( CommandReg, PCD_IDLE );
     71c:	34 01 00 02 	mvi r1,2
     720:	34 02 00 00 	mvi r2,0
     724:	f8 00 04 07 	calli 1740 <spi_write>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
     728:	34 01 00 12 	mvi r1,18
     72c:	34 02 00 93 	mvi r2,147
     730:	f8 00 04 04 	calli 1740 <spi_write>
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
     734:	34 01 00 12 	mvi r1,18
     738:	34 02 00 20 	mvi r2,32
     73c:	f8 00 04 01 	calli 1740 <spi_write>
	spi_write( CommandReg, PCD_TRANSCEIVE );
     740:	34 01 00 02 	mvi r1,2
     744:	34 02 00 0c 	mvi r2,12
     748:	f8 00 03 fe 	calli 1740 <spi_write>
	setBit( BitFramingReg, 0x80 );
     74c:	34 01 00 1a 	mvi r1,26
     750:	34 02 00 80 	mvi r2,128
     754:	fb ff fe ad 	calli 208 <setBit>
	
	while(flag)
	{

		n =spi_read( ComIrqReg );
     758:	34 01 00 08 	mvi r1,8
     75c:	f8 00 03 e6 	calli 16f4 <spi_read>
     760:	b8 20 60 00 	mv r12,r1
		if(n & waitIrq){

		flag = 0;
		}
		if(n & 0x01){
     764:	21 8b 00 01 	andi r11,r12,0x1

		flag=0;
		}

		msleep(1);
     768:	34 01 00 01 	mvi r1,1
		n =spi_read( ComIrqReg );
		if(n & waitIrq){

		flag = 0;
		}
		if(n & 0x01){
     76c:	5d 60 00 0a 	bne r11,r0,794 <loop+0x228>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
	spi_write( CommandReg, PCD_TRANSCEIVE );
	setBit( BitFramingReg, 0x80 );
	
	while(flag)
     770:	21 8c 00 30 	andi r12,r12,0x30
		if(n & 0x01){

		flag=0;
		}

		msleep(1);
     774:	f8 00 02 b9 	calli 1258 <msleep>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
	spi_write( CommandReg, PCD_TRANSCEIVE );
	setBit( BitFramingReg, 0x80 );
	
	while(flag)
     778:	5d 8b 00 09 	bne r12,r11,79c <loop+0x230>
	{

		n =spi_read( ComIrqReg );
     77c:	34 01 00 08 	mvi r1,8
     780:	f8 00 03 dd 	calli 16f4 <spi_read>
     784:	b8 20 60 00 	mv r12,r1
		if(n & waitIrq){

		flag = 0;
		}
		if(n & 0x01){
     788:	21 8b 00 01 	andi r11,r12,0x1

		flag=0;
		}

		msleep(1);
     78c:	34 01 00 01 	mvi r1,1
		n =spi_read( ComIrqReg );
		if(n & waitIrq){

		flag = 0;
		}
		if(n & 0x01){
     790:	45 60 ff f8 	be r11,r0,770 <loop+0x204>

		flag=0;
		}

		msleep(1);
     794:	34 01 00 01 	mvi r1,1
     798:	f8 00 02 b0 	calli 1258 <msleep>
	}
	
	flag = 1;

	clearBit( BitFramingReg, 0x80 );
     79c:	34 01 00 1a 	mvi r1,26
     7a0:	34 02 00 80 	mvi r2,128
     7a4:	fb ff fe aa 	calli 24c <clearBit>
	//char lec;
	
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
     7a8:	34 01 00 14 	mvi r1,20
     7ac:	f8 00 03 d2 	calli 16f4 <spi_read>
     7b0:	b8 20 78 00 	mv r15,r1


		msleep(200);
     7b4:	34 01 00 c8 	mvi r1,200
     7b8:	f8 00 02 a8 	calli 1258 <msleep>

	i=0;
	
	while (i<n)
     7bc:	45 e0 00 20 	be r15,r0,83c <loop+0x2d0>
     7c0:	34 0b 00 00 	mvi r11,0
	{
		lec = spi_read(FIFODataReg);
//		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		msleep(100);
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
     7c4:	34 0e 00 09 	mvi r14,9

		if(i==0){
		uno = secondDigit;
		dos = firstDigit;
		}
		if(i==1){
     7c8:	34 12 00 01 	mvi r18,1
		tres = secondDigit;
		cuatro = firstDigit;
		}
		if(i==2){
     7cc:	34 17 00 02 	mvi r23,2

	i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
     7d0:	34 01 00 12 	mvi r1,18
     7d4:	f8 00 03 c8 	calli 16f4 <spi_read>
     7d8:	b8 20 60 00 	mv r12,r1
//		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		msleep(100);
     7dc:	34 01 00 64 	mvi r1,100
     7e0:	f8 00 02 9e 	calli 1258 <msleep>
		char firstDigit  = lec & 0x0f;
     7e4:	21 8a 00 0f 	andi r10,r12,0xf
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
     7e8:	35 4d 00 37 	addi r13,r10,55
	{
		lec = spi_read(FIFODataReg);
//		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		msleep(100);
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
     7ec:	55 4e 00 02 	bgu r10,r14,7f4 <loop+0x288>
			firstDigit=firstDigit+48;
     7f0:	35 4d 00 30 	addi r13,r10,48
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
     7f4:	01 89 00 04 	srui r9,r12,4
     7f8:	21 29 00 ff 	andi r9,r9,0xff
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;
     7fc:	35 2c 00 37 	addi r12,r9,55
     800:	21 8c 00 ff 	andi r12,r12,0xff
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
     804:	55 2e 00 03 	bgu r9,r14,810 <loop+0x2a4>
			secondDigit=secondDigit+48;
     808:	35 29 00 30 	addi r9,r9,48
     80c:	21 2c 00 ff 	andi r12,r9,0xff
		else
			secondDigit=secondDigit+55;


		msleep(10);
     810:	34 01 00 0a 	mvi r1,10
     814:	f8 00 02 91 	calli 1258 <msleep>

		if(i==0){
     818:	45 60 00 27 	be r11,r0,8b4 <loop+0x348>
		uno = secondDigit;
		dos = firstDigit;
		}
		if(i==1){
     81c:	5d 72 00 29 	bne r11,r18,8c0 <loop+0x354>
		tres = secondDigit;
		cuatro = firstDigit;
     820:	b9 a0 a0 00 	mv r20,r13
		if(i==0){
		uno = secondDigit;
		dos = firstDigit;
		}
		if(i==1){
		tres = secondDigit;
     824:	b9 80 98 00 	mv r19,r12
		nueve = secondDigit;
		diez = firstDigit;
		}
		msleep(10);

		i=i+1;
     828:	35 6b 00 01 	addi r11,r11,1
		}
		if(i==4){
		nueve = secondDigit;
		diez = firstDigit;
		}
		msleep(10);
     82c:	34 01 00 0a 	mvi r1,10

		i=i+1;
     830:	21 6b 00 ff 	andi r11,r11,0xff
		}
		if(i==4){
		nueve = secondDigit;
		diez = firstDigit;
		}
		msleep(10);
     834:	f8 00 02 89 	calli 1258 <msleep>

		msleep(200);

	i=0;
	
	while (i<n)
     838:	55 eb ff e6 	bgu r15,r11,7d0 <loop+0x264>

		i=i+1;
	}
	
	
	char result = comparestr(uno, dos, tres, cuatro, cinco, seis, siete, ocho, nueve, diez);
     83c:	2b 88 00 50 	lw r8,(sp+80)
     840:	5b 98 00 04 	sw (sp+4),r24
     844:	5b 99 00 08 	sw (sp+8),r25
     848:	ba 20 08 00 	mv r1,r17
     84c:	ba 00 10 00 	mv r2,r16
     850:	ba 60 18 00 	mv r3,r19
     854:	ba 80 20 00 	mv r4,r20
     858:	ba a0 28 00 	mv r5,r21
     85c:	ba c0 30 00 	mv r6,r22
     860:	bb 60 38 00 	mv r7,fp
     864:	fb ff fe ad 	calli 318 <comparestr>
	return 	result;
}
     868:	2b 9d 00 0c 	lw ra,(sp+12)
     86c:	2b 8b 00 4c 	lw r11,(sp+76)
     870:	2b 8c 00 48 	lw r12,(sp+72)
     874:	2b 8d 00 44 	lw r13,(sp+68)
     878:	2b 8e 00 40 	lw r14,(sp+64)
     87c:	2b 8f 00 3c 	lw r15,(sp+60)
     880:	2b 90 00 38 	lw r16,(sp+56)
     884:	2b 91 00 34 	lw r17,(sp+52)
     888:	2b 92 00 30 	lw r18,(sp+48)
     88c:	2b 93 00 2c 	lw r19,(sp+44)
     890:	2b 94 00 28 	lw r20,(sp+40)
     894:	2b 95 00 24 	lw r21,(sp+36)
     898:	2b 96 00 20 	lw r22,(sp+32)
     89c:	2b 97 00 1c 	lw r23,(sp+28)
     8a0:	2b 98 00 18 	lw r24,(sp+24)
     8a4:	2b 99 00 14 	lw r25,(sp+20)
     8a8:	2b 9b 00 10 	lw fp,(sp+16)
     8ac:	37 9c 00 50 	addi sp,sp,80
     8b0:	c3 a0 00 00 	ret

		msleep(10);

		if(i==0){
		uno = secondDigit;
		dos = firstDigit;
     8b4:	b9 a0 80 00 	mv r16,r13


		msleep(10);

		if(i==0){
		uno = secondDigit;
     8b8:	b9 80 88 00 	mv r17,r12
     8bc:	e3 ff ff db 	bi 828 <loop+0x2bc>
		}
		if(i==1){
		tres = secondDigit;
		cuatro = firstDigit;
		}
		if(i==2){
     8c0:	5d 77 00 04 	bne r11,r23,8d0 <loop+0x364>
		cinco = secondDigit;
		seis = firstDigit;
     8c4:	b9 a0 b0 00 	mv r22,r13
		if(i==1){
		tres = secondDigit;
		cuatro = firstDigit;
		}
		if(i==2){
		cinco = secondDigit;
     8c8:	b9 80 a8 00 	mv r21,r12
     8cc:	e3 ff ff d7 	bi 828 <loop+0x2bc>
		seis = firstDigit;
		}
		if(i==3){
     8d0:	34 01 00 03 	mvi r1,3
     8d4:	5d 61 00 04 	bne r11,r1,8e4 <loop+0x378>
		siete = secondDigit;
		ocho = firstDigit;
     8d8:	5b 8d 00 50 	sw (sp+80),r13
		if(i==2){
		cinco = secondDigit;
		seis = firstDigit;
		}
		if(i==3){
		siete = secondDigit;
     8dc:	b9 80 d8 00 	mv fp,r12
     8e0:	e3 ff ff d2 	bi 828 <loop+0x2bc>
		ocho = firstDigit;
		}
		if(i==4){
     8e4:	34 01 00 04 	mvi r1,4
     8e8:	5d 61 ff d0 	bne r11,r1,828 <loop+0x2bc>
		nueve = secondDigit;
		diez = firstDigit;
     8ec:	b9 a0 c8 00 	mv r25,r13
		if(i==3){
		siete = secondDigit;
		ocho = firstDigit;
		}
		if(i==4){
		nueve = secondDigit;
     8f0:	b9 80 c0 00 	mv r24,r12
     8f4:	e3 ff ff cd 	bi 828 <loop+0x2bc>

000008f8 <dato_valido>:
	return 	result;
}



char dato_valido() {
     8f8:	37 9c ff f4 	addi sp,sp,-12
     8fc:	5b 8b 00 0c 	sw (sp+12),r11
     900:	5b 8c 00 08 	sw (sp+8),r12
     904:	5b 9d 00 04 	sw (sp+4),ra
	char principio;
        principio = 0x00;
	while(principio == 0x00  || (principio != 0x01 && principio != 0x02 && principio != 0x03)){
     908:	34 0c 00 02 	mvi r12,2
		principio = leer_teclado();
     90c:	f8 00 03 9c 	calli 177c <leer_teclado>
     910:	b8 20 58 00 	mv r11,r1
		msleep(100);
     914:	34 01 00 64 	mvi r1,100
     918:	f8 00 02 50 	calli 1258 <msleep>


char dato_valido() {
	char principio;
        principio = 0x00;
	while(principio == 0x00  || (principio != 0x01 && principio != 0x02 && principio != 0x03)){
     91c:	35 61 ff ff 	addi r1,r11,-1
     920:	20 21 00 ff 	andi r1,r1,0xff
     924:	54 2c ff fa 	bgu r1,r12,90c <dato_valido+0x14>
		principio = leer_teclado();
		msleep(100);
	}
	return principio;
}
     928:	b9 60 08 00 	mv r1,r11
     92c:	2b 9d 00 04 	lw ra,(sp+4)
     930:	2b 8b 00 0c 	lw r11,(sp+12)
     934:	2b 8c 00 08 	lw r12,(sp+8)
     938:	37 9c 00 0c 	addi sp,sp,12
     93c:	c3 a0 00 00 	ret

00000940 <readyOk>:

char readyOk(){
     940:	37 9c ff f4 	addi sp,sp,-12
     944:	5b 8b 00 0c 	sw (sp+12),r11
     948:	5b 8c 00 08 	sw (sp+8),r12
     94c:	5b 9d 00 04 	sw (sp+4),ra
	char ok;
        ok = 0x00;
	while(ok == 0x00  || (ok != 0x01)){
     950:	34 0c 00 01 	mvi r12,1
		ok = leer_teclado();
     954:	f8 00 03 8a 	calli 177c <leer_teclado>
     958:	b8 20 58 00 	mv r11,r1
		msleep(100);
     95c:	34 01 00 64 	mvi r1,100
     960:	f8 00 02 3e 	calli 1258 <msleep>
}

char readyOk(){
	char ok;
        ok = 0x00;
	while(ok == 0x00  || (ok != 0x01)){
     964:	5d 6c ff fc 	bne r11,r12,954 <readyOk+0x14>
		ok = leer_teclado();
		msleep(100);
	}
	return ok;
}
     968:	34 01 00 01 	mvi r1,1
     96c:	2b 9d 00 04 	lw ra,(sp+4)
     970:	2b 8b 00 0c 	lw r11,(sp+12)
     974:	2b 8c 00 08 	lw r12,(sp+8)
     978:	37 9c 00 0c 	addi sp,sp,12
     97c:	c3 a0 00 00 	ret

00000980 <dia_actual>:

char dia_actual() {
     980:	37 9c ff f4 	addi sp,sp,-12
     984:	5b 8b 00 0c 	sw (sp+12),r11
     988:	5b 8c 00 08 	sw (sp+8),r12
     98c:	5b 9d 00 04 	sw (sp+4),ra
        char dia = 0x00;
	while(dia == 0x00  || (dia != 0x01 && dia != 0x02 && dia != 0x03 && dia != 0x04 && dia != 0x5)){
     990:	34 0c 00 04 	mvi r12,4
		dia = leer_teclado();
     994:	f8 00 03 7a 	calli 177c <leer_teclado>
     998:	b8 20 58 00 	mv r11,r1
		msleep(100);
     99c:	34 01 00 64 	mvi r1,100
     9a0:	f8 00 02 2e 	calli 1258 <msleep>
	return ok;
}

char dia_actual() {
        char dia = 0x00;
	while(dia == 0x00  || (dia != 0x01 && dia != 0x02 && dia != 0x03 && dia != 0x04 && dia != 0x5)){
     9a4:	35 61 ff ff 	addi r1,r11,-1
     9a8:	20 21 00 ff 	andi r1,r1,0xff
     9ac:	54 2c ff fa 	bgu r1,r12,994 <dia_actual+0x14>
		dia = leer_teclado();
		msleep(100);
	}
	return dia;
}
     9b0:	b9 60 08 00 	mv r1,r11
     9b4:	2b 9d 00 04 	lw ra,(sp+4)
     9b8:	2b 8b 00 0c 	lw r11,(sp+12)
     9bc:	2b 8c 00 08 	lw r12,(sp+8)
     9c0:	37 9c 00 0c 	addi sp,sp,12
     9c4:	c3 a0 00 00 	ret

000009c8 <check>:

int check() {
     9c8:	37 9c ff f8 	addi sp,sp,-8
     9cc:	5b 8b 00 08 	sw (sp+8),r11
     9d0:	5b 9d 00 04 	sw (sp+4),ra
	char check = 0x00;
	while(check != 0x01 && check != 0x0F){
		check = leer_teclado();
     9d4:	f8 00 03 6a 	calli 177c <leer_teclado>
     9d8:	b8 20 58 00 	mv r11,r1
		msleep(100);
     9dc:	34 01 00 64 	mvi r1,100
     9e0:	f8 00 02 1e 	calli 1258 <msleep>
	return dia;
}

int check() {
	char check = 0x00;
	while(check != 0x01 && check != 0x0F){
     9e4:	7d 62 00 0f 	cmpnei r2,r11,15
     9e8:	7d 61 00 01 	cmpnei r1,r11,1
     9ec:	a0 41 08 00 	and r1,r2,r1
     9f0:	5c 20 ff f9 	bne r1,r0,9d4 <check+0xc>
	}
        if(check == 0x01){
                return 1;
        }
        return 0;
}
     9f4:	65 61 00 01 	cmpei r1,r11,1
     9f8:	2b 9d 00 04 	lw ra,(sp+4)
     9fc:	2b 8b 00 08 	lw r11,(sp+8)
     a00:	37 9c 00 08 	addi sp,sp,8
     a04:	c3 a0 00 00 	ret

00000a08 <writeCharlcd>:
//---------------------------------------------------------------------------
// LCD Functions
//---------------------------------------------------------------------------

void writeCharlcd (char letter) 
{
     a08:	37 9c ff f0 	addi sp,sp,-16
     a0c:	5b 8b 00 10 	sw (sp+16),r11
     a10:	5b 8c 00 0c 	sw (sp+12),r12
     a14:	5b 8d 00 08 	sw (sp+8),r13
     a18:	5b 9d 00 04 	sw (sp+4),ra
     a1c:	20 2c 00 ff 	andi r12,r1,0xff
  char highnib;
  char lownib;
  highnib = letter & 0xF0;
     a20:	21 8d 00 f0 	andi r13,r12,0xf0
  lownib  = letter & 0x0F;

     i2c_write(0x27, 0x00, highnib|0b00001001);
     a24:	39 ab 00 09 	ori r11,r13,0x9
     a28:	b9 60 18 00 	mv r3,r11
     a2c:	34 01 00 27 	mvi r1,39
     a30:	34 02 00 00 	mvi r2,0
     a34:	f8 00 03 63 	calli 17c0 <i2c_write>
     i2c_write(0x27, 0x00, highnib|0b00001101);
     a38:	39 a3 00 0d 	ori r3,r13,0xd
     a3c:	34 01 00 27 	mvi r1,39
     a40:	34 02 00 00 	mvi r2,0
     i2c_write(0x27, 0x00, highnib|0b00001001);  

     i2c_write(0x27, 0x00, (lownib<<4)|0b00001001);
     a44:	21 8c 00 0f 	andi r12,r12,0xf
  char lownib;
  highnib = letter & 0xF0;
  lownib  = letter & 0x0F;

     i2c_write(0x27, 0x00, highnib|0b00001001);
     i2c_write(0x27, 0x00, highnib|0b00001101);
     a48:	f8 00 03 5e 	calli 17c0 <i2c_write>
     i2c_write(0x27, 0x00, highnib|0b00001001);  

     i2c_write(0x27, 0x00, (lownib<<4)|0b00001001);
     a4c:	3d 8c 00 04 	sli r12,r12,4
  highnib = letter & 0xF0;
  lownib  = letter & 0x0F;

     i2c_write(0x27, 0x00, highnib|0b00001001);
     i2c_write(0x27, 0x00, highnib|0b00001101);
     i2c_write(0x27, 0x00, highnib|0b00001001);  
     a50:	b9 60 18 00 	mv r3,r11
     a54:	34 01 00 27 	mvi r1,39
     a58:	34 02 00 00 	mvi r2,0
     a5c:	f8 00 03 59 	calli 17c0 <i2c_write>

     i2c_write(0x27, 0x00, (lownib<<4)|0b00001001);
     a60:	39 8b 00 09 	ori r11,r12,0x9
     a64:	b9 60 18 00 	mv r3,r11
     a68:	34 01 00 27 	mvi r1,39
     a6c:	34 02 00 00 	mvi r2,0
     a70:	f8 00 03 54 	calli 17c0 <i2c_write>
     i2c_write(0x27, 0x00, (lownib<<4)|0b00001101);
     a74:	39 83 00 0d 	ori r3,r12,0xd
     a78:	34 01 00 27 	mvi r1,39
     a7c:	34 02 00 00 	mvi r2,0
     a80:	f8 00 03 50 	calli 17c0 <i2c_write>
     i2c_write(0x27, 0x00, (lownib<<4)|0b00001001);
     a84:	34 01 00 27 	mvi r1,39
     a88:	34 02 00 00 	mvi r2,0
     a8c:	b9 60 18 00 	mv r3,r11
     a90:	f8 00 03 4c 	calli 17c0 <i2c_write>
}
     a94:	2b 9d 00 04 	lw ra,(sp+4)
     a98:	2b 8b 00 10 	lw r11,(sp+16)
     a9c:	2b 8c 00 0c 	lw r12,(sp+12)
     aa0:	2b 8d 00 08 	lw r13,(sp+8)
     aa4:	37 9c 00 10 	addi sp,sp,16
     aa8:	c3 a0 00 00 	ret

00000aac <writeStringlcd>:
     i2c_write(0x27, 0x00, (lownib<<4)|0b00001000);
     i2c_write(0x27, 0x00, (lownib<<4)|0b00001100);
     i2c_write(0x27, 0x00, (lownib<<4)|0b00001000);
}

void writeStringlcd (char *str) {
     aac:	37 9c ff f8 	addi sp,sp,-8
     ab0:	5b 8b 00 08 	sw (sp+8),r11
     ab4:	5b 9d 00 04 	sw (sp+4),ra
     ab8:	b8 20 58 00 	mv r11,r1
	char *c = str;
	while(*c) {
     abc:	40 21 00 00 	lbu r1,(r1+0)
     ac0:	44 20 00 05 	be r1,r0,ad4 <writeStringlcd+0x28>
		writeCharlcd(*c);
		c++;
     ac4:	35 6b 00 01 	addi r11,r11,1
}

void writeStringlcd (char *str) {
	char *c = str;
	while(*c) {
		writeCharlcd(*c);
     ac8:	fb ff ff d0 	calli a08 <writeCharlcd>
     i2c_write(0x27, 0x00, (lownib<<4)|0b00001000);
}

void writeStringlcd (char *str) {
	char *c = str;
	while(*c) {
     acc:	41 61 00 00 	lbu r1,(r11+0)
     ad0:	5c 20 ff fd 	bne r1,r0,ac4 <writeStringlcd+0x18>
		writeCharlcd(*c);
		c++;
	}
}
     ad4:	2b 9d 00 04 	lw ra,(sp+4)
     ad8:	2b 8b 00 08 	lw r11,(sp+8)
     adc:	37 9c 00 08 	addi sp,sp,8
     ae0:	c3 a0 00 00 	ret

00000ae4 <writeCommandlcd>:




void writeCommandlcd (char command) 
{
     ae4:	37 9c ff f0 	addi sp,sp,-16
     ae8:	5b 8b 00 10 	sw (sp+16),r11
     aec:	5b 8c 00 0c 	sw (sp+12),r12
     af0:	5b 8d 00 08 	sw (sp+8),r13
     af4:	5b 9d 00 04 	sw (sp+4),ra
     af8:	20 2c 00 ff 	andi r12,r1,0xff
  char highnib;
  char lownib;
  highnib = command&0xF0;
     afc:	21 8d 00 f0 	andi r13,r12,0xf0
  lownib = command&0x0F;

     i2c_write(0x27, 0x00, highnib|0b00001000);
     b00:	39 ab 00 08 	ori r11,r13,0x8
     b04:	b9 60 18 00 	mv r3,r11
     b08:	34 01 00 27 	mvi r1,39
     b0c:	34 02 00 00 	mvi r2,0
     b10:	f8 00 03 2c 	calli 17c0 <i2c_write>
     i2c_write(0x27, 0x00, highnib|0b00001100);
     b14:	39 a3 00 0c 	ori r3,r13,0xc
     b18:	34 01 00 27 	mvi r1,39
     b1c:	34 02 00 00 	mvi r2,0
     i2c_write(0x27, 0x00, highnib|0b00001000);  

     i2c_write(0x27, 0x00, (lownib<<4)|0b00001000);
     b20:	21 8c 00 0f 	andi r12,r12,0xf
  char lownib;
  highnib = command&0xF0;
  lownib = command&0x0F;

     i2c_write(0x27, 0x00, highnib|0b00001000);
     i2c_write(0x27, 0x00, highnib|0b00001100);
     b24:	f8 00 03 27 	calli 17c0 <i2c_write>
     i2c_write(0x27, 0x00, highnib|0b00001000);  

     i2c_write(0x27, 0x00, (lownib<<4)|0b00001000);
     b28:	3d 8c 00 04 	sli r12,r12,4
  highnib = command&0xF0;
  lownib = command&0x0F;

     i2c_write(0x27, 0x00, highnib|0b00001000);
     i2c_write(0x27, 0x00, highnib|0b00001100);
     i2c_write(0x27, 0x00, highnib|0b00001000);  
     b2c:	b9 60 18 00 	mv r3,r11
     b30:	34 01 00 27 	mvi r1,39
     b34:	34 02 00 00 	mvi r2,0
     b38:	f8 00 03 22 	calli 17c0 <i2c_write>

     i2c_write(0x27, 0x00, (lownib<<4)|0b00001000);
     b3c:	39 8b 00 08 	ori r11,r12,0x8
     b40:	b9 60 18 00 	mv r3,r11
     b44:	34 01 00 27 	mvi r1,39
     b48:	34 02 00 00 	mvi r2,0
     b4c:	f8 00 03 1d 	calli 17c0 <i2c_write>
     i2c_write(0x27, 0x00, (lownib<<4)|0b00001100);
     b50:	39 83 00 0c 	ori r3,r12,0xc
     b54:	34 01 00 27 	mvi r1,39
     b58:	34 02 00 00 	mvi r2,0
     b5c:	f8 00 03 19 	calli 17c0 <i2c_write>
     i2c_write(0x27, 0x00, (lownib<<4)|0b00001000);
     b60:	34 01 00 27 	mvi r1,39
     b64:	34 02 00 00 	mvi r2,0
     b68:	b9 60 18 00 	mv r3,r11
     b6c:	f8 00 03 15 	calli 17c0 <i2c_write>
}
     b70:	2b 9d 00 04 	lw ra,(sp+4)
     b74:	2b 8b 00 10 	lw r11,(sp+16)
     b78:	2b 8c 00 0c 	lw r12,(sp+12)
     b7c:	2b 8d 00 08 	lw r13,(sp+8)
     b80:	37 9c 00 10 	addi sp,sp,16
     b84:	c3 a0 00 00 	ret

00000b88 <clearDisplay>:

// LCD_I2C CONFIG
// DB7 DB6 DB5 DB4 CTRST EN RW RS

void clearDisplay() 
{
     b88:	37 9c ff fc 	addi sp,sp,-4
     b8c:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00000001);
     b90:	34 01 00 01 	mvi r1,1
     b94:	fb ff ff d4 	calli ae4 <writeCommandlcd>
   msleep(1);
     b98:	34 01 00 01 	mvi r1,1
     b9c:	f8 00 01 af 	calli 1258 <msleep>
}
     ba0:	2b 9d 00 04 	lw ra,(sp+4)
     ba4:	37 9c 00 04 	addi sp,sp,4
     ba8:	c3 a0 00 00 	ret

00000bac <returnHome>:

void returnHome()
{
     bac:	37 9c ff fc 	addi sp,sp,-4
     bb0:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00000010);
     bb4:	34 01 00 02 	mvi r1,2
     bb8:	fb ff ff cb 	calli ae4 <writeCommandlcd>
   msleep(2);
     bbc:	34 01 00 02 	mvi r1,2
     bc0:	f8 00 01 a6 	calli 1258 <msleep>
}
     bc4:	2b 9d 00 04 	lw ra,(sp+4)
     bc8:	37 9c 00 04 	addi sp,sp,4
     bcc:	c3 a0 00 00 	ret

00000bd0 <entryModeSet2>:

// I/D = 1, S=0
void entryModeSet2()
{  
     bd0:	37 9c ff fc 	addi sp,sp,-4
     bd4:	5b 9d 00 04 	sw (sp+4),ra
  
   writeCommandlcd(0b00000110);
     bd8:	34 01 00 06 	mvi r1,6
     bdc:	fb ff ff c2 	calli ae4 <writeCommandlcd>
   msleep(1);
     be0:	34 01 00 01 	mvi r1,1
     be4:	f8 00 01 9d 	calli 1258 <msleep>
}
     be8:	2b 9d 00 04 	lw ra,(sp+4)
     bec:	37 9c 00 04 	addi sp,sp,4
     bf0:	c3 a0 00 00 	ret

00000bf4 <entryModeSet>:

// I/D = 1, S=1
void entryModeSet()
{  
     bf4:	37 9c ff fc 	addi sp,sp,-4
     bf8:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00000111);
     bfc:	34 01 00 07 	mvi r1,7
     c00:	fb ff ff b9 	calli ae4 <writeCommandlcd>
   msleep(1);
     c04:	34 01 00 01 	mvi r1,1
     c08:	f8 00 01 94 	calli 1258 <msleep>
}
     c0c:	2b 9d 00 04 	lw ra,(sp+4)
     c10:	37 9c 00 04 	addi sp,sp,4
     c14:	c3 a0 00 00 	ret

00000c18 <entryModeSet3>:


// I/D = 0, S=0
void entryModeSet3()
{  
     c18:	37 9c ff fc 	addi sp,sp,-4
     c1c:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00000100);
     c20:	34 01 00 04 	mvi r1,4
     c24:	fb ff ff b0 	calli ae4 <writeCommandlcd>
   msleep(1);
     c28:	34 01 00 01 	mvi r1,1
     c2c:	f8 00 01 8b 	calli 1258 <msleep>
}
     c30:	2b 9d 00 04 	lw ra,(sp+4)
     c34:	37 9c 00 04 	addi sp,sp,4
     c38:	c3 a0 00 00 	ret

00000c3c <entryModeSet4>:

// I/D = 0, S=1
void entryModeSet4()
{  
     c3c:	37 9c ff fc 	addi sp,sp,-4
     c40:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00000101);
     c44:	34 01 00 05 	mvi r1,5
     c48:	fb ff ff a7 	calli ae4 <writeCommandlcd>
   msleep(1);
     c4c:	34 01 00 01 	mvi r1,1
     c50:	f8 00 01 82 	calli 1258 <msleep>
}
     c54:	2b 9d 00 04 	lw ra,(sp+4)
     c58:	37 9c 00 04 	addi sp,sp,4
     c5c:	c3 a0 00 00 	ret

00000c60 <displayOff>:


void displayOff()
{  
     c60:	37 9c ff fc 	addi sp,sp,-4
     c64:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00001000);
     c68:	34 01 00 08 	mvi r1,8
     c6c:	fb ff ff 9e 	calli ae4 <writeCommandlcd>
   msleep(1);
     c70:	34 01 00 01 	mvi r1,1
     c74:	f8 00 01 79 	calli 1258 <msleep>
}
     c78:	2b 9d 00 04 	lw ra,(sp+4)
     c7c:	37 9c 00 04 	addi sp,sp,4
     c80:	c3 a0 00 00 	ret

00000c84 <displayOn>:

// D=1, C=1, B=1
void displayOn()
{  
     c84:	37 9c ff fc 	addi sp,sp,-4
     c88:	5b 9d 00 04 	sw (sp+4),ra

   writeCommandlcd(0b00001111);
     c8c:	34 01 00 0f 	mvi r1,15
     c90:	fb ff ff 95 	calli ae4 <writeCommandlcd>
   msleep(1);
     c94:	34 01 00 01 	mvi r1,1
     c98:	f8 00 01 70 	calli 1258 <msleep>
}
     c9c:	2b 9d 00 04 	lw ra,(sp+4)
     ca0:	37 9c 00 04 	addi sp,sp,4
     ca4:	c3 a0 00 00 	ret

00000ca8 <cursorShiftRight>:


// S/C = 0, R/L = 1
void cursorShiftRight()
{  
     ca8:	37 9c ff fc 	addi sp,sp,-4
     cac:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00010100);
     cb0:	34 01 00 14 	mvi r1,20
     cb4:	fb ff ff 8c 	calli ae4 <writeCommandlcd>
   msleep(1);
     cb8:	34 01 00 01 	mvi r1,1
     cbc:	f8 00 01 67 	calli 1258 <msleep>
}
     cc0:	2b 9d 00 04 	lw ra,(sp+4)
     cc4:	37 9c 00 04 	addi sp,sp,4
     cc8:	c3 a0 00 00 	ret

00000ccc <cursorShiftLeft>:



// S/C = 0, R/L = 0
void cursorShiftLeft()
{  
     ccc:	37 9c ff fc 	addi sp,sp,-4
     cd0:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00010000);
     cd4:	34 01 00 10 	mvi r1,16
     cd8:	fb ff ff 83 	calli ae4 <writeCommandlcd>
   msleep(1);
     cdc:	34 01 00 01 	mvi r1,1
     ce0:	f8 00 01 5e 	calli 1258 <msleep>
}
     ce4:	2b 9d 00 04 	lw ra,(sp+4)
     ce8:	37 9c 00 04 	addi sp,sp,4
     cec:	c3 a0 00 00 	ret

00000cf0 <displayShiftRight>:


// S/C = 1, R/L = 1
void displayShiftRight()
{   
     cf0:	37 9c ff fc 	addi sp,sp,-4
     cf4:	5b 9d 00 04 	sw (sp+4),ra

   writeCommandlcd(0b00011100);
     cf8:	34 01 00 1c 	mvi r1,28
     cfc:	fb ff ff 7a 	calli ae4 <writeCommandlcd>
   msleep(1);
     d00:	34 01 00 01 	mvi r1,1
     d04:	f8 00 01 55 	calli 1258 <msleep>
}
     d08:	2b 9d 00 04 	lw ra,(sp+4)
     d0c:	37 9c 00 04 	addi sp,sp,4
     d10:	c3 a0 00 00 	ret

00000d14 <displayShiftLeft>:


// S/C = 1, R/L = 0
void displayShiftLeft()
{  
     d14:	37 9c ff fc 	addi sp,sp,-4
     d18:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00011000);
     d1c:	34 01 00 18 	mvi r1,24
     d20:	fb ff ff 71 	calli ae4 <writeCommandlcd>
   msleep(1);
     d24:	34 01 00 01 	mvi r1,1
     d28:	f8 00 01 4c 	calli 1258 <msleep>
}
     d2c:	2b 9d 00 04 	lw ra,(sp+4)
     d30:	37 9c 00 04 	addi sp,sp,4
     d34:	c3 a0 00 00 	ret

00000d38 <functionSet>:


// D/L = 0, N = 1, F = 0
//4-Bit mode, 2 lines, 5x8 dots
void functionSet()
{  
     d38:	37 9c ff fc 	addi sp,sp,-4
     d3c:	5b 9d 00 04 	sw (sp+4),ra

   writeCommandlcd(0b00101000);
     d40:	34 01 00 28 	mvi r1,40
     d44:	fb ff ff 68 	calli ae4 <writeCommandlcd>
   msleep(1);
     d48:	34 01 00 01 	mvi r1,1
     d4c:	f8 00 01 43 	calli 1258 <msleep>
}
     d50:	2b 9d 00 04 	lw ra,(sp+4)
     d54:	37 9c 00 04 	addi sp,sp,4
     d58:	c3 a0 00 00 	ret

00000d5c <lcdInit>:


void lcdInit ()
{  //1
     d5c:	37 9c ff fc 	addi sp,sp,-4
     d60:	5b 9d 00 04 	sw (sp+4),ra
   msleep(50);
     d64:	34 01 00 32 	mvi r1,50
     d68:	f8 00 01 3c 	calli 1258 <msleep>
   i2c_write(0x27, 0x00, 0b00111000);
     d6c:	34 01 00 27 	mvi r1,39
     d70:	34 02 00 00 	mvi r2,0
     d74:	34 03 00 38 	mvi r3,56
     d78:	f8 00 02 92 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00111100);
     d7c:	34 01 00 27 	mvi r1,39
     d80:	34 02 00 00 	mvi r2,0
     d84:	34 03 00 3c 	mvi r3,60
     d88:	f8 00 02 8e 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00111000);
     d8c:	34 02 00 00 	mvi r2,0
     d90:	34 03 00 38 	mvi r3,56
     d94:	34 01 00 27 	mvi r1,39
     d98:	f8 00 02 8a 	calli 17c0 <i2c_write>
   msleep(5);
     d9c:	34 01 00 05 	mvi r1,5
     da0:	f8 00 01 2e 	calli 1258 <msleep>
   
   //2
   i2c_write(0x27, 0x00, 0b00111000);
     da4:	34 01 00 27 	mvi r1,39
     da8:	34 02 00 00 	mvi r2,0
     dac:	34 03 00 38 	mvi r3,56
     db0:	f8 00 02 84 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00111100);
     db4:	34 01 00 27 	mvi r1,39
     db8:	34 02 00 00 	mvi r2,0
     dbc:	34 03 00 3c 	mvi r3,60
     dc0:	f8 00 02 80 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00111000);
     dc4:	34 02 00 00 	mvi r2,0
     dc8:	34 03 00 38 	mvi r3,56
     dcc:	34 01 00 27 	mvi r1,39
     dd0:	f8 00 02 7c 	calli 17c0 <i2c_write>
   msleep(5);
     dd4:	34 01 00 05 	mvi r1,5
     dd8:	f8 00 01 20 	calli 1258 <msleep>
   //3
   i2c_write(0x27, 0x00, 0b00111000);
     ddc:	34 01 00 27 	mvi r1,39
     de0:	34 02 00 00 	mvi r2,0
     de4:	34 03 00 38 	mvi r3,56
     de8:	f8 00 02 76 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00111100);
     dec:	34 01 00 27 	mvi r1,39
     df0:	34 02 00 00 	mvi r2,0
     df4:	34 03 00 3c 	mvi r3,60
     df8:	f8 00 02 72 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00111000);
     dfc:	34 02 00 00 	mvi r2,0
     e00:	34 03 00 38 	mvi r3,56
     e04:	34 01 00 27 	mvi r1,39
     e08:	f8 00 02 6e 	calli 17c0 <i2c_write>
   msleep(1);
     e0c:	34 01 00 01 	mvi r1,1
     e10:	f8 00 01 12 	calli 1258 <msleep>
   //5
   i2c_write(0x27, 0x00, 0b00101000);
     e14:	34 01 00 27 	mvi r1,39
     e18:	34 02 00 00 	mvi r2,0
     e1c:	34 03 00 28 	mvi r3,40
     e20:	f8 00 02 68 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00101100);
     e24:	34 01 00 27 	mvi r1,39
     e28:	34 02 00 00 	mvi r2,0
     e2c:	34 03 00 2c 	mvi r3,44
     e30:	f8 00 02 64 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00101000);
     e34:	34 02 00 00 	mvi r2,0
     e38:	34 03 00 28 	mvi r3,40
     e3c:	34 01 00 27 	mvi r1,39
     e40:	f8 00 02 60 	calli 17c0 <i2c_write>
   msleep(1);
     e44:	34 01 00 01 	mvi r1,1
     e48:	f8 00 01 04 	calli 1258 <msleep>
   //6
   i2c_write(0x27, 0x00, 0b00101000);
     e4c:	34 01 00 27 	mvi r1,39
     e50:	34 02 00 00 	mvi r2,0
     e54:	34 03 00 28 	mvi r3,40
     e58:	f8 00 02 5a 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00101100);
     e5c:	34 01 00 27 	mvi r1,39
     e60:	34 02 00 00 	mvi r2,0
     e64:	34 03 00 2c 	mvi r3,44
     e68:	f8 00 02 56 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00101000);
     e6c:	34 02 00 00 	mvi r2,0
     e70:	34 03 00 28 	mvi r3,40
     e74:	34 01 00 27 	mvi r1,39
     e78:	f8 00 02 52 	calli 17c0 <i2c_write>
   msleep(1);
     e7c:	34 01 00 01 	mvi r1,1
     e80:	f8 00 00 f6 	calli 1258 <msleep>
   //7
   i2c_write(0x27, 0x00, 0b10001000);
     e84:	34 01 00 27 	mvi r1,39
     e88:	34 02 00 00 	mvi r2,0
     e8c:	34 03 00 88 	mvi r3,136
     e90:	f8 00 02 4c 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b10001100);
     e94:	34 01 00 27 	mvi r1,39
     e98:	34 02 00 00 	mvi r2,0
     e9c:	34 03 00 8c 	mvi r3,140
     ea0:	f8 00 02 48 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b10001000);
     ea4:	34 02 00 00 	mvi r2,0
     ea8:	34 03 00 88 	mvi r3,136
     eac:	34 01 00 27 	mvi r1,39
     eb0:	f8 00 02 44 	calli 17c0 <i2c_write>
   msleep(1);
     eb4:	34 01 00 01 	mvi r1,1
     eb8:	f8 00 00 e8 	calli 1258 <msleep>
   //8
   i2c_write(0x27, 0x00, 0b00001000);
     ebc:	34 01 00 27 	mvi r1,39
     ec0:	34 02 00 00 	mvi r2,0
     ec4:	34 03 00 08 	mvi r3,8
     ec8:	f8 00 02 3e 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00001100);
     ecc:	34 01 00 27 	mvi r1,39
     ed0:	34 02 00 00 	mvi r2,0
     ed4:	34 03 00 0c 	mvi r3,12
     ed8:	f8 00 02 3a 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00001000);
     edc:	34 02 00 00 	mvi r2,0
     ee0:	34 03 00 08 	mvi r3,8
     ee4:	34 01 00 27 	mvi r1,39
     ee8:	f8 00 02 36 	calli 17c0 <i2c_write>
   msleep(1);
     eec:	34 01 00 01 	mvi r1,1
     ef0:	f8 00 00 da 	calli 1258 <msleep>
   //9
   i2c_write(0x27, 0x00, 0b10001000);
     ef4:	34 01 00 27 	mvi r1,39
     ef8:	34 02 00 00 	mvi r2,0
     efc:	34 03 00 88 	mvi r3,136
     f00:	f8 00 02 30 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b10001100);
     f04:	34 01 00 27 	mvi r1,39
     f08:	34 02 00 00 	mvi r2,0
     f0c:	34 03 00 8c 	mvi r3,140
     f10:	f8 00 02 2c 	calli 17c0 <i2c_write>
   i2c_write(0X27, 0x00, 0b10001000);
     f14:	34 02 00 00 	mvi r2,0
     f18:	34 03 00 88 	mvi r3,136
     f1c:	34 01 00 27 	mvi r1,39
     f20:	f8 00 02 28 	calli 17c0 <i2c_write>
   msleep(1);
     f24:	34 01 00 01 	mvi r1,1
     f28:	f8 00 00 cc 	calli 1258 <msleep>
   //10
   i2c_write(0x27, 0x00, 0b00001000);
     f2c:	34 01 00 27 	mvi r1,39
     f30:	34 02 00 00 	mvi r2,0
     f34:	34 03 00 08 	mvi r3,8
     f38:	f8 00 02 22 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00001100);
     f3c:	34 01 00 27 	mvi r1,39
     f40:	34 02 00 00 	mvi r2,0
     f44:	34 03 00 0c 	mvi r3,12
     f48:	f8 00 02 1e 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00001000);
     f4c:	34 02 00 00 	mvi r2,0
     f50:	34 03 00 08 	mvi r3,8
     f54:	34 01 00 27 	mvi r1,39
     f58:	f8 00 02 1a 	calli 17c0 <i2c_write>
   msleep(2);
     f5c:	34 01 00 02 	mvi r1,2
     f60:	f8 00 00 be 	calli 1258 <msleep>
   //11
   i2c_write(0x27, 0x00, 0b11111000);
     f64:	34 01 00 27 	mvi r1,39
     f68:	34 02 00 00 	mvi r2,0
     f6c:	34 03 00 f8 	mvi r3,248
     f70:	f8 00 02 14 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b11111100);
     f74:	34 01 00 27 	mvi r1,39
     f78:	34 02 00 00 	mvi r2,0
     f7c:	34 03 00 fc 	mvi r3,252
     f80:	f8 00 02 10 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b11111000);
     f84:	34 02 00 00 	mvi r2,0
     f88:	34 03 00 f8 	mvi r3,248
     f8c:	34 01 00 27 	mvi r1,39
     f90:	f8 00 02 0c 	calli 17c0 <i2c_write>
   msleep(1);
     f94:	34 01 00 01 	mvi r1,1
     f98:	f8 00 00 b0 	calli 1258 <msleep>

   //12
   i2c_write(0x27, 0x00, 0b00001000);
     f9c:	34 01 00 27 	mvi r1,39
     fa0:	34 02 00 00 	mvi r2,0
     fa4:	34 03 00 08 	mvi r3,8
     fa8:	f8 00 02 06 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00001100);
     fac:	34 01 00 27 	mvi r1,39
     fb0:	34 02 00 00 	mvi r2,0
     fb4:	34 03 00 0c 	mvi r3,12
     fb8:	f8 00 02 02 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b00001000);
     fbc:	34 02 00 00 	mvi r2,0
     fc0:	34 03 00 08 	mvi r3,8
     fc4:	34 01 00 27 	mvi r1,39
     fc8:	f8 00 01 fe 	calli 17c0 <i2c_write>
   msleep(1);
     fcc:	34 01 00 01 	mvi r1,1
     fd0:	f8 00 00 a2 	calli 1258 <msleep>
   //13
   i2c_write(0x27, 0x00, 0b01101000);
     fd4:	34 01 00 27 	mvi r1,39
     fd8:	34 02 00 00 	mvi r2,0
     fdc:	34 03 00 68 	mvi r3,104
     fe0:	f8 00 01 f8 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b01101100);
     fe4:	34 01 00 27 	mvi r1,39
     fe8:	34 02 00 00 	mvi r2,0
     fec:	34 03 00 6c 	mvi r3,108
     ff0:	f8 00 01 f4 	calli 17c0 <i2c_write>
   i2c_write(0x27, 0x00, 0b01101000);
     ff4:	34 02 00 00 	mvi r2,0
     ff8:	34 03 00 68 	mvi r3,104
     ffc:	34 01 00 27 	mvi r1,39
    1000:	f8 00 01 f0 	calli 17c0 <i2c_write>
   msleep(2);
    1004:	34 01 00 02 	mvi r1,2
    1008:	f8 00 00 94 	calli 1258 <msleep>

}
    100c:	2b 9d 00 04 	lw ra,(sp+4)
    1010:	37 9c 00 04 	addi sp,sp,4
    1014:	c3 a0 00 00 	ret

00001018 <seleccion>:

char* seleccion(char *a, char*b, char *c){
    1018:	37 9c ff ec 	addi sp,sp,-20
    101c:	5b 8b 00 14 	sw (sp+20),r11
    1020:	5b 8c 00 10 	sw (sp+16),r12
    1024:	5b 8d 00 0c 	sw (sp+12),r13
    1028:	5b 8e 00 08 	sw (sp+8),r14
    102c:	5b 9d 00 04 	sw (sp+4),ra
	char principio;
	char *selection;
		clearDisplay();
		writeStringlcd("Digite:             ");
    1030:	78 0b 00 00 	mvhi r11,0x0
   i2c_write(0x27, 0x00, 0b01101000);
   msleep(2);

}

char* seleccion(char *a, char*b, char *c){
    1034:	b8 40 70 00 	mv r14,r2
    1038:	b8 60 68 00 	mv r13,r3
    103c:	b8 20 60 00 	mv r12,r1
	char principio;
	char *selection;
		clearDisplay();
		writeStringlcd("Digite:             ");
    1040:	39 6b 18 84 	ori r11,r11,0x1884
}

char* seleccion(char *a, char*b, char *c){
	char principio;
	char *selection;
		clearDisplay();
    1044:	fb ff fe d1 	calli b88 <clearDisplay>
		writeStringlcd("Digite:             ");
    1048:	b9 60 08 00 	mv r1,r11
    104c:	fb ff fe 98 	calli aac <writeStringlcd>
		writeStringlcd("1 ");
    1050:	78 04 00 00 	mvhi r4,0x0
    1054:	b8 80 08 00 	mv r1,r4
    1058:	38 21 18 9c 	ori r1,r1,0x189c
    105c:	fb ff fe 94 	calli aac <writeStringlcd>
		writeStringlcd(a);
    1060:	b9 80 08 00 	mv r1,r12
    1064:	fb ff fe 92 	calli aac <writeStringlcd>
                msleep(1200);      
    1068:	34 01 04 b0 	mvi r1,1200
    106c:	f8 00 00 7b 	calli 1258 <msleep>
 		clearDisplay();
    1070:	fb ff fe c6 	calli b88 <clearDisplay>
		writeStringlcd("Digite:             ");
    1074:	b9 60 08 00 	mv r1,r11
    1078:	fb ff fe 8d 	calli aac <writeStringlcd>
		writeStringlcd("2 ");
    107c:	78 04 00 00 	mvhi r4,0x0
    1080:	b8 80 08 00 	mv r1,r4
    1084:	38 21 18 a0 	ori r1,r1,0x18a0
    1088:	fb ff fe 89 	calli aac <writeStringlcd>
		writeStringlcd(b);
    108c:	b9 c0 08 00 	mv r1,r14
    1090:	fb ff fe 87 	calli aac <writeStringlcd>
                msleep(1200);
    1094:	34 01 04 b0 	mvi r1,1200
    1098:	f8 00 00 70 	calli 1258 <msleep>
 		clearDisplay();
    109c:	fb ff fe bb 	calli b88 <clearDisplay>
		writeStringlcd("Digite:             ");
    10a0:	b9 60 08 00 	mv r1,r11
    10a4:	fb ff fe 82 	calli aac <writeStringlcd>
		writeStringlcd("3 ");
    10a8:	78 04 00 00 	mvhi r4,0x0
    10ac:	b8 80 08 00 	mv r1,r4
    10b0:	38 21 18 a4 	ori r1,r1,0x18a4
    10b4:	fb ff fe 7e 	calli aac <writeStringlcd>
		writeStringlcd(c);
    10b8:	b9 a0 08 00 	mv r1,r13
    10bc:	fb ff fe 7c 	calli aac <writeStringlcd>
                msleep(1200);  
    10c0:	34 01 04 b0 	mvi r1,1200
    10c4:	f8 00 00 65 	calli 1258 <msleep>
		principio = dato_valido();
    10c8:	fb ff fe 0c 	calli 8f8 <dato_valido>
    10cc:	b8 20 58 00 	mv r11,r1
                msleep(100);
    10d0:	34 01 00 64 	mvi r1,100
    10d4:	f8 00 00 61 	calli 1258 <msleep>


		if(principio == 0x01){
    10d8:	34 01 00 01 	mvi r1,1
			selection = a;
    10dc:	b9 80 20 00 	mv r4,r12
                msleep(1200);  
		principio = dato_valido();
                msleep(100);


		if(principio == 0x01){
    10e0:	45 61 00 06 	be r11,r1,10f8 <seleccion+0xe0>
			selection = a;
		};
		if(principio == 0x02){
    10e4:	34 01 00 02 	mvi r1,2
    10e8:	45 61 00 0c 	be r11,r1,1118 <seleccion+0x100>
			selection = b;
		};
		if(principio == 0x03){
    10ec:	34 01 00 03 	mvi r1,3
    10f0:	5d 61 00 02 	bne r11,r1,10f8 <seleccion+0xe0>
			selection = c;
    10f4:	b9 a0 20 00 	mv r4,r13
		}
		return selection;

}
    10f8:	b8 80 08 00 	mv r1,r4
    10fc:	2b 9d 00 04 	lw ra,(sp+4)
    1100:	2b 8b 00 14 	lw r11,(sp+20)
    1104:	2b 8c 00 10 	lw r12,(sp+16)
    1108:	2b 8d 00 0c 	lw r13,(sp+12)
    110c:	2b 8e 00 08 	lw r14,(sp+8)
    1110:	37 9c 00 14 	addi sp,sp,20
    1114:	c3 a0 00 00 	ret

		if(principio == 0x01){
			selection = a;
		};
		if(principio == 0x02){
			selection = b;
    1118:	b9 c0 20 00 	mv r4,r14
		if(principio == 0x03){
			selection = c;
		}
		return selection;

}
    111c:	b8 80 08 00 	mv r1,r4
    1120:	2b 9d 00 04 	lw ra,(sp+4)
    1124:	2b 8b 00 14 	lw r11,(sp+20)
    1128:	2b 8c 00 10 	lw r12,(sp+16)
    112c:	2b 8d 00 0c 	lw r13,(sp+12)
    1130:	2b 8e 00 08 	lw r14,(sp+8)
    1134:	37 9c 00 14 	addi sp,sp,20
    1138:	c3 a0 00 00 	ret

0000113c <main>:

int main()
{	
    113c:	37 9c ff f8 	addi sp,sp,-8
    1140:	5b 8b 00 08 	sw (sp+8),r11
    1144:	5b 9d 00 04 	sw (sp+4),ra
    1148:	78 0b 00 00 	mvhi r11,0x0
	init_wifi();
    114c:	f8 00 00 d5 	calli 14a0 <init_wifi>
    1150:	39 6b 18 a8 	ori r11,r11,0x18a8
	lcdInit();
    1154:	fb ff ff 02 	calli d5c <lcdInit>
	clearDisplay();
    1158:	fb ff fe 8c 	calli b88 <clearDisplay>

while(1){	
	wifi_putstr("HOLA");
    115c:	b9 60 08 00 	mv r1,r11
    1160:	f8 00 00 ed 	calli 1514 <wifi_putstr>
    1164:	e3 ff ff fe 	bi 115c <main+0x20>

00001168 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
    1168:	c3 a0 00 00 	ret

0000116c <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
    116c:	78 01 00 00 	mvhi r1,0x0
    1170:	38 21 19 c4 	ori r1,r1,0x19c4
    1174:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
    1178:	78 02 00 00 	mvhi r2,0x0
    117c:	38 42 19 30 	ori r2,r2,0x1930
    1180:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
    1184:	34 63 00 01 	addi r3,r3,1
    1188:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
    118c:	34 01 00 0e 	mvi r1,14
    1190:	58 41 00 00 	sw (r2+0),r1
}
    1194:	c3 a0 00 00 	ret

00001198 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
    1198:	37 9c ff f0 	addi sp,sp,-16
    119c:	5b 8b 00 10 	sw (sp+16),r11
    11a0:	5b 8c 00 0c 	sw (sp+12),r12
    11a4:	5b 8d 00 08 	sw (sp+8),r13
    11a8:	5b 9d 00 04 	sw (sp+4),ra
    11ac:	78 0b 00 00 	mvhi r11,0x0
    11b0:	39 6b 19 44 	ori r11,r11,0x1944
    11b4:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
    11b8:	35 6d 00 80 	addi r13,r11,128
    11bc:	e0 00 00 04 	bi 11cc <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
    11c0:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
    11c4:	45 6d 00 08 	be r11,r13,11e4 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
    11c8:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
    11cc:	21 81 00 01 	andi r1,r12,0x1
    11d0:	44 20 ff fc 	be r1,r0,11c0 <irq_handler+0x28>
    11d4:	29 61 00 00 	lw r1,(r11+0)
    11d8:	35 6b 00 04 	addi r11,r11,4
    11dc:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
    11e0:	5d 6d ff fa 	bne r11,r13,11c8 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
    11e4:	2b 9d 00 04 	lw ra,(sp+4)
    11e8:	2b 8b 00 10 	lw r11,(sp+16)
    11ec:	2b 8c 00 0c 	lw r12,(sp+12)
    11f0:	2b 8d 00 08 	lw r13,(sp+8)
    11f4:	37 9c 00 10 	addi sp,sp,16
    11f8:	c3 a0 00 00 	ret

000011fc <isr_init>:

void isr_init()
{
    11fc:	78 01 00 00 	mvhi r1,0x0
    1200:	78 02 00 00 	mvhi r2,0x0
    1204:	38 21 19 44 	ori r1,r1,0x1944
    1208:	38 42 11 68 	ori r2,r2,0x1168
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
    120c:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
    1210:	58 22 00 00 	sw (r1+0),r2
    1214:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
    1218:	5c 23 ff fe 	bne r1,r3,1210 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
    121c:	c3 a0 00 00 	ret

00001220 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
    1220:	78 03 00 00 	mvhi r3,0x0
    1224:	3c 21 00 02 	sli r1,r1,2
    1228:	38 63 19 44 	ori r3,r3,0x1944
    122c:	b4 61 18 00 	add r3,r3,r1
    1230:	58 62 00 00 	sw (r3+0),r2
}
    1234:	c3 a0 00 00 	ret

00001238 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
    1238:	78 03 00 00 	mvhi r3,0x0
    123c:	3c 21 00 02 	sli r1,r1,2
    1240:	38 63 19 44 	ori r3,r3,0x1944
    1244:	78 02 00 00 	mvhi r2,0x0
    1248:	b4 61 18 00 	add r3,r3,r1
    124c:	38 42 11 68 	ori r2,r2,0x1168
    1250:	58 62 00 00 	sw (r3+0),r2
}
    1254:	c3 a0 00 00 	ret

00001258 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
    1258:	78 04 00 00 	mvhi r4,0x0
    125c:	38 84 18 b0 	ori r4,r4,0x18b0
    1260:	28 83 00 00 	lw r3,(r4+0)
    1264:	78 02 00 00 	mvhi r2,0x0
    1268:	38 42 19 30 	ori r2,r2,0x1930
    126c:	28 42 00 00 	lw r2,(r2+0)
    1270:	88 23 08 00 	mul r1,r1,r3
    1274:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
    1278:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
    127c:	34 01 00 08 	mvi r1,8
    1280:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
    1284:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
    1288:	20 21 00 01 	andi r1,r1,0x1
    128c:	44 20 ff fe 	be r1,r0,1284 <msleep+0x2c>
}
    1290:	c3 a0 00 00 	ret

00001294 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
    1294:	78 02 00 00 	mvhi r2,0x0
    1298:	38 42 19 30 	ori r2,r2,0x1930
    129c:	28 42 00 00 	lw r2,(r2+0)
    12a0:	08 21 00 64 	muli r1,r1,100
    12a4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
    12a8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
    12ac:	34 01 00 08 	mvi r1,8
    12b0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
    12b4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
    12b8:	20 21 00 01 	andi r1,r1,0x1
    12bc:	44 20 ff fe 	be r1,r0,12b4 <nsleep+0x20>
}
    12c0:	c3 a0 00 00 	ret

000012c4 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
    12c4:	78 01 00 00 	mvhi r1,0x0
    12c8:	38 21 19 30 	ori r1,r1,0x1930
    12cc:	28 23 00 00 	lw r3,(r1+0)
    12d0:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
    12d4:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
    12d8:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
    12dc:	38 21 19 c4 	ori r1,r1,0x19c4

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
    12e0:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
    12e4:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
    12e8:	78 02 00 00 	mvhi r2,0x0
    12ec:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
    12f0:	34 04 00 0e 	mvi r4,14
    12f4:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
    12f8:	38 21 19 44 	ori r1,r1,0x1944
    12fc:	38 42 11 6c 	ori r2,r2,0x116c
    1300:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
    1304:	c3 a0 00 00 	ret

00001308 <wifi_getchar2>:
		if (c ==':'){
			c = uart_one_getchar();
			return c;
		}
	}
	return '\n';
    1308:	78 01 00 00 	mvhi r1,0x0
    130c:	38 21 19 40 	ori r1,r1,0x1940
    1310:	28 22 00 00 	lw r2,(r1+0)

																																																																																																																																																																																																																																																																																																															
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
    1314:	34 03 00 00 	mvi r3,0
		c = uart_one_getchar();
		if (c ==':'){
    1318:	34 04 00 3a 	mvi r4,58

																																																																																																																																																																																																																																																																																																															
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
    131c:	34 05 00 14 	mvi r5,20
}


char uart_one_getchar()
{   
	while (! (uart1->ucr & UART_DR)) ;   // Me toca poner las variables para el UART1 ojo!!!
    1320:	28 41 00 00 	lw r1,(r2+0)
    1324:	20 21 00 01 	andi r1,r1,0x1
    1328:	44 20 ff fe 	be r1,r0,1320 <wifi_getchar2+0x18>
	return uart1->rxtx;
    132c:	28 41 00 04 	lw r1,(r2+4)

																																																																																																																																																																																																																																																																																																															
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
    1330:	34 63 00 01 	addi r3,r3,1
		c = uart_one_getchar();
		if (c ==':'){
    1334:	20 21 00 ff 	andi r1,r1,0xff
    1338:	44 24 00 04 	be r1,r4,1348 <wifi_getchar2+0x40>

																																																																																																																																																																																																																																																																																																															
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
    133c:	5c 65 ff f9 	bne r3,r5,1320 <wifi_getchar2+0x18>
		if (c ==':'){
			c = uart_one_getchar();
			return c;
		}
	}
	return '\n';
    1340:	34 01 00 0a 	mvi r1,10
}
    1344:	c3 a0 00 00 	ret
}


char uart_one_getchar()
{   
	while (! (uart1->ucr & UART_DR)) ;   // Me toca poner las variables para el UART1 ojo!!!
    1348:	28 41 00 00 	lw r1,(r2+0)
    134c:	20 21 00 01 	andi r1,r1,0x1
    1350:	44 20 ff fe 	be r1,r0,1348 <wifi_getchar2+0x40>
	return uart1->rxtx;
    1354:	28 41 00 04 	lw r1,(r2+4)
    1358:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_one_getchar();
		if (c ==':'){
			c = uart_one_getchar();
			return c;
    135c:	c3 a0 00 00 	ret

00001360 <ok>:
		a = uart_one_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
    1360:	78 01 00 00 	mvhi r1,0x0
    1364:	38 21 19 40 	ori r1,r1,0x1940
    1368:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
    136c:	34 03 00 00 	mvi r3,0
		a = uart_one_getchar();
		if(a=='K'){
    1370:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
    1374:	34 05 00 1e 	mvi r5,30
}


char uart_one_getchar()
{   
	while (! (uart1->ucr & UART_DR)) ;   // Me toca poner las variables para el UART1 ojo!!!
    1378:	28 41 00 00 	lw r1,(r2+0)
    137c:	20 21 00 01 	andi r1,r1,0x1
    1380:	44 20 ff fe 	be r1,r0,1378 <ok+0x18>
	return uart1->rxtx;
    1384:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
    1388:	34 63 00 01 	addi r3,r3,1
		a = uart_one_getchar();
		if(a=='K'){
    138c:	20 21 00 ff 	andi r1,r1,0xff
    1390:	44 24 00 04 	be r1,r4,13a0 <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
    1394:	5c 65 ff f9 	bne r3,r5,1378 <ok+0x18>
		a = uart_one_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
    1398:	34 01 00 00 	mvi r1,0
    139c:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a = uart_one_getchar();
		if(a=='K'){
			return 1;
    13a0:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
    13a4:	c3 a0 00 00 	ret

000013a8 <uart_init>:
/***************************************************************************
 * UART Functions
 */
void uart_init()
{
}
    13a8:	c3 a0 00 00 	ret

000013ac <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
    13ac:	40 24 00 00 	lbu r4,(r1+0)
    13b0:	44 80 00 0b 	be r4,r0,13dc <uart_putstr+0x30>
    13b4:	78 02 00 00 	mvhi r2,0x0
    13b8:	38 42 19 2c 	ori r2,r2,0x192c
    13bc:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
    13c0:	28 62 00 00 	lw r2,(r3+0)
    13c4:	20 42 00 10 	andi r2,r2,0x10
    13c8:	5c 40 ff fe 	bne r2,r0,13c0 <uart_putstr+0x14>
	uart0->rxtx = c;
    13cc:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
    13d0:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
    13d4:	40 24 00 00 	lbu r4,(r1+0)
    13d8:	5c 82 ff fa 	bne r4,r2,13c0 <uart_putstr+0x14>
    13dc:	c3 a0 00 00 	ret

000013e0 <uart_getchar>:
		c++;
	}
}

char uart_getchar()
{   
    13e0:	78 01 00 00 	mvhi r1,0x0
    13e4:	38 21 19 2c 	ori r1,r1,0x192c
    13e8:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
    13ec:	28 41 00 00 	lw r1,(r2+0)
    13f0:	20 21 00 01 	andi r1,r1,0x1
    13f4:	44 20 ff fe 	be r1,r0,13ec <uart_getchar+0xc>
	return uart0->rxtx;
    13f8:	28 41 00 04 	lw r1,(r2+4)
}
    13fc:	20 21 00 ff 	andi r1,r1,0xff
    1400:	c3 a0 00 00 	ret

00001404 <uart_putchar>:

void uart_putchar(char c)
{
    1404:	78 02 00 00 	mvhi r2,0x0
    1408:	38 42 19 2c 	ori r2,r2,0x192c
    140c:	28 43 00 00 	lw r3,(r2+0)
    1410:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
    1414:	28 62 00 00 	lw r2,(r3+0)
    1418:	20 42 00 10 	andi r2,r2,0x10
    141c:	5c 40 ff fe 	bne r2,r0,1414 <uart_putchar+0x10>
	uart0->rxtx = c;
    1420:	58 61 00 04 	sw (r3+4),r1
}
    1424:	c3 a0 00 00 	ret

00001428 <uart_gen_putchar>:
		c++;
	}
}

void uart_gen_putchar(char c)
{
    1428:	78 02 00 00 	mvhi r2,0x0
    142c:	38 42 19 2c 	ori r2,r2,0x192c
    1430:	28 44 00 00 	lw r4,(r2+0)
    1434:	20 21 00 ff 	andi r1,r1,0xff
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
    1438:	28 82 00 00 	lw r2,(r4+0)
    143c:	20 42 00 10 	andi r2,r2,0x10
    1440:	5c 40 ff fe 	bne r2,r0,1438 <uart_gen_putchar+0x10>
	uart0->rxtx = c;
    1444:	78 02 00 00 	mvhi r2,0x0
    1448:	38 42 19 40 	ori r2,r2,0x1940
    144c:	28 43 00 00 	lw r3,(r2+0)
    1450:	58 81 00 04 	sw (r4+4),r1
	 uart_one_putchar(c);
}

void uart_one_putchar(char c)
{
	while (uart1->ucr & UART_BUSY) ;  // Me toca poner las variables para el UART1 ojo!!!
    1454:	28 62 00 00 	lw r2,(r3+0)
    1458:	20 42 00 10 	andi r2,r2,0x10
    145c:	5c 40 ff fe 	bne r2,r0,1454 <uart_gen_putchar+0x2c>
	uart1->rxtx = c;
    1460:	58 61 00 04 	sw (r3+4),r1

void uart_gen_putchar(char c)
{
	 uart_putchar(c);
	 uart_one_putchar(c);
}
    1464:	c3 a0 00 00 	ret

00001468 <uart_gen_putstr>:
//Esto lo modifico para el moódulo WIFI
//***************************


void uart_gen_putstr(char *str)
{
    1468:	37 9c ff f8 	addi sp,sp,-8
    146c:	5b 8b 00 08 	sw (sp+8),r11
    1470:	5b 9d 00 04 	sw (sp+4),ra
    1474:	b8 20 58 00 	mv r11,r1
	char *c = str;
	while(*c) {
    1478:	40 21 00 00 	lbu r1,(r1+0)
    147c:	44 20 00 05 	be r1,r0,1490 <uart_gen_putstr+0x28>
		uart_gen_putchar(*c);
		c++;
    1480:	35 6b 00 01 	addi r11,r11,1

void uart_gen_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_gen_putchar(*c);
    1484:	fb ff ff e9 	calli 1428 <uart_gen_putchar>


void uart_gen_putstr(char *str)
{
	char *c = str;
	while(*c) {
    1488:	41 61 00 00 	lbu r1,(r11+0)
    148c:	5c 20 ff fd 	bne r1,r0,1480 <uart_gen_putstr+0x18>
		uart_gen_putchar(*c);
		c++;
	}
}
    1490:	2b 9d 00 04 	lw ra,(sp+4)
    1494:	2b 8b 00 08 	lw r11,(sp+8)
    1498:	37 9c 00 08 	addi sp,sp,8
    149c:	c3 a0 00 00 	ret

000014a0 <init_wifi>:

/***************************************************************************
 * UART1 ESP8266
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
    14a0:	37 9c ff f8 	addi sp,sp,-8
    14a4:	5b 8b 00 08 	sw (sp+8),r11
    14a8:	5b 9d 00 04 	sw (sp+4),ra

	uart_gen_putstr("AT+RST\r\n");
    14ac:	78 01 00 00 	mvhi r1,0x0
    14b0:	38 21 18 b4 	ori r1,r1,0x18b4
    14b4:	fb ff ff ed 	calli 1468 <uart_gen_putstr>
	msleep(200);
    14b8:	34 01 00 c8 	mvi r1,200
    14bc:	78 0b 00 00 	mvhi r11,0x0
    14c0:	fb ff ff 66 	calli 1258 <msleep>
    14c4:	39 6b 18 c0 	ori r11,r11,0x18c0
	int c = 0;
	while(c==0){
		uart_gen_putstr("AT+CIPMUX=1\r\n");
    14c8:	b9 60 08 00 	mv r1,r11
    14cc:	fb ff ff e7 	calli 1468 <uart_gen_putstr>
		c = ok();
    14d0:	fb ff ff a4 	calli 1360 <ok>
void init_wifi(){ //configurar el modulo como estación con puerto 80

	uart_gen_putstr("AT+RST\r\n");
	msleep(200);
	int c = 0;
	while(c==0){
    14d4:	44 20 ff fd 	be r1,r0,14c8 <init_wifi+0x28>
		uart_gen_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	msleep(10);
    14d8:	34 01 00 0a 	mvi r1,10
    14dc:	fb ff ff 5f 	calli 1258 <msleep>
	uart_gen_putstr("hast");
    14e0:	78 01 00 00 	mvhi r1,0x0
    14e4:	38 21 18 d0 	ori r1,r1,0x18d0
    14e8:	78 0b 00 00 	mvhi r11,0x0
    14ec:	fb ff ff df 	calli 1468 <uart_gen_putstr>
    14f0:	39 6b 18 d8 	ori r11,r11,0x18d8
	c = 0;
	while (c==0){
		uart_gen_putstr("AT+CIPSERVER=1,80\r\n");
    14f4:	b9 60 08 00 	mv r1,r11
    14f8:	fb ff ff dc 	calli 1468 <uart_gen_putstr>
		c = ok();
    14fc:	fb ff ff 99 	calli 1360 <ok>
		c = ok();
	}
	msleep(10);
	uart_gen_putstr("hast");
	c = 0;
	while (c==0){
    1500:	44 20 ff fd 	be r1,r0,14f4 <init_wifi+0x54>
		uart_gen_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}
    1504:	2b 9d 00 04 	lw ra,(sp+4)
    1508:	2b 8b 00 08 	lw r11,(sp+8)
    150c:	37 9c 00 08 	addi sp,sp,8
    1510:	c3 a0 00 00 	ret

00001514 <wifi_putstr>:
		c = ok();
	}
}
				

void wifi_putstr(char *a){
    1514:	37 9c ff e4 	addi sp,sp,-28
    1518:	5b 8b 00 1c 	sw (sp+28),r11
    151c:	5b 8c 00 18 	sw (sp+24),r12
    1520:	5b 8d 00 14 	sw (sp+20),r13
    1524:	5b 8e 00 10 	sw (sp+16),r14
    1528:	5b 8f 00 0c 	sw (sp+12),r15
    152c:	5b 90 00 08 	sw (sp+8),r16
    1530:	5b 9d 00 04 	sw (sp+4),ra
	int c = 0;   
	char *cc = a;
	int counter = 0;
	while(*cc) {
    1534:	40 24 00 00 	lbu r4,(r1+0)
		c = ok();
	}
}
				

void wifi_putstr(char *a){
    1538:	b8 20 30 00 	mv r6,r1
	int c = 0;   
	char *cc = a;
	int counter = 0;
	while(*cc) {
    153c:	34 0f 00 00 	mvi r15,0
    1540:	44 80 00 0e 	be r4,r0,1578 <wifi_putstr+0x64>
    1544:	78 01 00 00 	mvhi r1,0x0
    1548:	38 21 19 2c 	ori r1,r1,0x192c
    154c:	28 23 00 00 	lw r3,(r1+0)
				

void wifi_putstr(char *a){
	int c = 0;   
	char *cc = a;
	int counter = 0;
    1550:	34 05 00 00 	mvi r5,0
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
    1554:	28 62 00 00 	lw r2,(r3+0)
    1558:	20 42 00 10 	andi r2,r2,0x10
    155c:	5c 40 ff fe 	bne r2,r0,1554 <wifi_putstr+0x40>
	char *cc = a;
	int counter = 0;
	while(*cc) {
		uart_putchar(*cc);
		cc++;
		counter ++;
    1560:	34 a5 00 01 	addi r5,r5,1
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
    1564:	58 64 00 04 	sw (r3+4),r4
		c = ok();
	}
}
				

void wifi_putstr(char *a){
    1568:	b4 c5 08 00 	add r1,r6,r5
	int c = 0;   
	char *cc = a;
	int counter = 0;
	while(*cc) {
    156c:	40 24 00 00 	lbu r4,(r1+0)
    1570:	5c 82 ff f9 	bne r4,r2,1554 <wifi_putstr+0x40>
    1574:	b8 a0 78 00 	mv r15,r5
    1578:	78 0e 00 00 	mvhi r14,0x0
    157c:	78 0d 00 00 	mvhi r13,0x0
    1580:	78 0c 00 00 	mvhi r12,0x0
    1584:	20 d0 00 ff 	andi r16,r6,0xff
    1588:	39 ce 18 ec 	ori r14,r14,0x18ec
    158c:	39 ad 18 fc 	ori r13,r13,0x18fc
    1590:	39 8c 19 00 	ori r12,r12,0x1900
		cc++;
		counter ++;
	}

	while(c == 0){
		uart_gen_putstr("AT+CIPSEND=0,");
    1594:	b9 c0 08 00 	mv r1,r14
    1598:	fb ff ff b4 	calli 1468 <uart_gen_putstr>
		uart_gen_putstr(counter);
    159c:	b9 e0 08 00 	mv r1,r15
    15a0:	fb ff ff b2 	calli 1468 <uart_gen_putstr>
		uart_gen_putstr("\r\n");
    15a4:	b9 a0 08 00 	mv r1,r13
    15a8:	fb ff ff b0 	calli 1468 <uart_gen_putstr>
		uart_putstr("hala");
    15ac:	b9 80 08 00 	mv r1,r12
    15b0:	fb ff ff 7f 	calli 13ac <uart_putstr>
		msleep(10);
    15b4:	34 01 00 0a 	mvi r1,10
    15b8:	fb ff ff 28 	calli 1258 <msleep>
		uart_gen_putchar(a);
    15bc:	ba 00 08 00 	mv r1,r16
    15c0:	fb ff ff 9a 	calli 1428 <uart_gen_putchar>
		c = ok();
    15c4:	fb ff ff 67 	calli 1360 <ok>
    15c8:	b8 20 58 00 	mv r11,r1
		msleep(100);
    15cc:	34 01 00 64 	mvi r1,100
    15d0:	fb ff ff 22 	calli 1258 <msleep>
		uart_putchar(*cc);
		cc++;
		counter ++;
	}

	while(c == 0){
    15d4:	45 60 ff f0 	be r11,r0,1594 <wifi_putstr+0x80>
    15d8:	78 0b 00 00 	mvhi r11,0x0
    15dc:	39 6b 19 08 	ori r11,r11,0x1908
		c = ok();
		msleep(100);
	}
	c = 0; 	  
	while(c == 0){
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
    15e0:	b9 60 08 00 	mv r1,r11
    15e4:	fb ff ff a1 	calli 1468 <uart_gen_putstr>
		c = ok();
    15e8:	fb ff ff 5e 	calli 1360 <ok>
		uart_gen_putchar(a);
		c = ok();
		msleep(100);
	}
	c = 0; 	  
	while(c == 0){
    15ec:	44 20 ff fd 	be r1,r0,15e0 <wifi_putstr+0xcc>
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
		c = ok();
	}
}
    15f0:	2b 9d 00 04 	lw ra,(sp+4)
    15f4:	2b 8b 00 1c 	lw r11,(sp+28)
    15f8:	2b 8c 00 18 	lw r12,(sp+24)
    15fc:	2b 8d 00 14 	lw r13,(sp+20)
    1600:	2b 8e 00 10 	lw r14,(sp+16)
    1604:	2b 8f 00 0c 	lw r15,(sp+12)
    1608:	2b 90 00 08 	lw r16,(sp+8)
    160c:	37 9c 00 1c 	addi sp,sp,28
    1610:	c3 a0 00 00 	ret

00001614 <wifi_putchar2>:
		uart_gen_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}

void wifi_putchar2(char a){
    1614:	37 9c ff f0 	addi sp,sp,-16
    1618:	5b 8b 00 10 	sw (sp+16),r11
    161c:	5b 8c 00 0c 	sw (sp+12),r12
    1620:	5b 8d 00 08 	sw (sp+8),r13
    1624:	5b 9d 00 04 	sw (sp+4),ra
    1628:	78 0c 00 00 	mvhi r12,0x0
    162c:	20 2d 00 ff 	andi r13,r1,0xff
    1630:	39 8c 19 18 	ori r12,r12,0x1918
	int c = 0; 	  
	while(c == 0){
		uart_gen_putstr("AT+CIPSEND=0,1\r\n");
    1634:	b9 80 08 00 	mv r1,r12
    1638:	fb ff ff 8c 	calli 1468 <uart_gen_putstr>
		msleep(10);
    163c:	34 01 00 0a 	mvi r1,10
    1640:	fb ff ff 06 	calli 1258 <msleep>
		uart_gen_putchar(a);
    1644:	b9 a0 08 00 	mv r1,r13
    1648:	fb ff ff 78 	calli 1428 <uart_gen_putchar>
		c = ok();
    164c:	fb ff ff 45 	calli 1360 <ok>
    1650:	b8 20 58 00 	mv r11,r1
		msleep(100);
    1654:	34 01 00 64 	mvi r1,100
    1658:	fb ff ff 00 	calli 1258 <msleep>
	}
}

void wifi_putchar2(char a){
	int c = 0; 	  
	while(c == 0){
    165c:	45 60 ff f6 	be r11,r0,1634 <wifi_putchar2+0x20>
    1660:	78 0b 00 00 	mvhi r11,0x0
    1664:	39 6b 19 08 	ori r11,r11,0x1908
		c = ok();
		msleep(100);
	}
	c = 0; 	  
	while(c == 0){
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
    1668:	b9 60 08 00 	mv r1,r11
    166c:	fb ff ff 7f 	calli 1468 <uart_gen_putstr>
		c = ok();
    1670:	fb ff ff 3c 	calli 1360 <ok>
		uart_gen_putchar(a);
		c = ok();
		msleep(100);
	}
	c = 0; 	  
	while(c == 0){
    1674:	44 20 ff fd 	be r1,r0,1668 <wifi_putchar2+0x54>
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
		c = ok();
	}
}
    1678:	2b 9d 00 04 	lw ra,(sp+4)
    167c:	2b 8b 00 10 	lw r11,(sp+16)
    1680:	2b 8c 00 0c 	lw r12,(sp+12)
    1684:	2b 8d 00 08 	lw r13,(sp+8)
    1688:	37 9c 00 10 	addi sp,sp,16
    168c:	c3 a0 00 00 	ret

00001690 <uart_one_putchar>:
	 uart_putchar(c);
	 uart_one_putchar(c);
}

void uart_one_putchar(char c)
{
    1690:	78 02 00 00 	mvhi r2,0x0
    1694:	38 42 19 40 	ori r2,r2,0x1940
    1698:	28 43 00 00 	lw r3,(r2+0)
    169c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;  // Me toca poner las variables para el UART1 ojo!!!
    16a0:	28 62 00 00 	lw r2,(r3+0)
    16a4:	20 42 00 10 	andi r2,r2,0x10
    16a8:	5c 40 ff fe 	bne r2,r0,16a0 <uart_one_putchar+0x10>
	uart1->rxtx = c;
    16ac:	58 61 00 04 	sw (r3+4),r1
}
    16b0:	c3 a0 00 00 	ret

000016b4 <uart_one_getchar>:


char uart_one_getchar()
{   
    16b4:	78 01 00 00 	mvhi r1,0x0
    16b8:	38 21 19 40 	ori r1,r1,0x1940
    16bc:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;   // Me toca poner las variables para el UART1 ojo!!!
    16c0:	28 41 00 00 	lw r1,(r2+0)
    16c4:	20 21 00 01 	andi r1,r1,0x1
    16c8:	44 20 ff fe 	be r1,r0,16c0 <uart_one_getchar+0xc>
	return uart1->rxtx;
    16cc:	28 41 00 04 	lw r1,(r2+4)
}
    16d0:	20 21 00 ff 	andi r1,r1,0xff
    16d4:	c3 a0 00 00 	ret

000016d8 <spi_start>:
 * SPI Functions
 */
//These are the specific funtions for the RC522 rfid reader card
void spi_start()
{
	spi0->ucr=0x1;
    16d8:	78 01 00 00 	mvhi r1,0x0
    16dc:	38 21 19 38 	ori r1,r1,0x1938
    16e0:	28 21 00 00 	lw r1,(r1+0)
    16e4:	34 02 00 01 	mvi r2,1
    16e8:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
    16ec:	58 20 00 00 	sw (r1+0),r0
}
    16f0:	c3 a0 00 00 	ret

000016f4 <spi_read>:
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
	regAddress = regAddress << 8;
    16f4:	78 02 00 00 	mvhi r2,0x0
	spi0->ucr=0x0;
}
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
    16f8:	20 21 00 7e 	andi r1,r1,0x7e
	regAddress = regAddress << 8;
    16fc:	38 42 19 38 	ori r2,r2,0x1938
	spi0->ucr=0x0;
}
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
    1700:	38 23 00 80 	ori r3,r1,0x80
	regAddress = regAddress << 8;
    1704:	28 41 00 00 	lw r1,(r2+0)
    1708:	3c 63 00 08 	sli r3,r3,8
	while(spi0->ucr & SPI_BUSY);
    170c:	28 22 00 00 	lw r2,(r1+0)
    1710:	20 42 00 02 	andi r2,r2,0x2
    1714:	5c 40 ff fe 	bne r2,r0,170c <spi_read+0x18>
	spi0->data_in= regAddress;
    1718:	58 23 00 04 	sw (r1+4),r3
 * SPI Functions
 */
//These are the specific funtions for the RC522 rfid reader card
void spi_start()
{
	spi0->ucr=0x1;
    171c:	34 02 00 01 	mvi r2,1
    1720:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
    1724:	58 20 00 00 	sw (r1+0),r0
	uint32_t regAddress = (0x80 | (reg & 0x7E));
	regAddress = regAddress << 8;
	while(spi0->ucr & SPI_BUSY);
	spi0->data_in= regAddress;
	spi_start();
	while(spi0->ucr & SPI_BUSY);
    1728:	28 22 00 00 	lw r2,(r1+0)
    172c:	20 42 00 02 	andi r2,r2,0x2
    1730:	5c 40 ff fe 	bne r2,r0,1728 <spi_read+0x34>
	
	return spi0->data_out;	
    1734:	28 21 00 08 	lw r1,(r1+8)
}
    1738:	20 21 00 ff 	andi r1,r1,0xff
    173c:	c3 a0 00 00 	ret

00001740 <spi_write>:
void spi_write (char reg, char value)
{
	//reg=reg<<1;
	uint32_t regAddress=(reg & 0x7E);
    1740:	20 21 00 7e 	andi r1,r1,0x7e
	regAddress = regAddress << 8;
    1744:	3c 24 00 08 	sli r4,r1,8
	uint32_t data0 = regAddress | value;
    1748:	78 03 00 00 	mvhi r3,0x0
    174c:	38 63 19 38 	ori r3,r3,0x1938
	while(spi0->ucr & SPI_BUSY);
	
	return spi0->data_out;	
}
void spi_write (char reg, char value)
{
    1750:	20 42 00 ff 	andi r2,r2,0xff
	//reg=reg<<1;
	uint32_t regAddress=(reg & 0x7E);
	regAddress = regAddress << 8;
	uint32_t data0 = regAddress | value;
    1754:	28 61 00 00 	lw r1,(r3+0)
    1758:	b8 82 18 00 	or r3,r4,r2
	while(spi0->ucr & SPI_BUSY);
    175c:	28 22 00 00 	lw r2,(r1+0)
    1760:	20 42 00 02 	andi r2,r2,0x2
    1764:	5c 40 ff fe 	bne r2,r0,175c <spi_write+0x1c>
	spi0->data_in=data0;
    1768:	58 23 00 04 	sw (r1+4),r3
 * SPI Functions
 */
//These are the specific funtions for the RC522 rfid reader card
void spi_start()
{
	spi0->ucr=0x1;
    176c:	34 02 00 01 	mvi r2,1
    1770:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
    1774:	58 20 00 00 	sw (r1+0),r0
	regAddress = regAddress << 8;
	uint32_t data0 = regAddress | value;
	while(spi0->ucr & SPI_BUSY);
	spi0->data_in=data0;
	spi_start();
}
    1778:	c3 a0 00 00 	ret

0000177c <leer_teclado>:
 * TECLADO MATRICIAL
 */

char leer_teclado()     // creo que el retorno siempre es char.
{
	return teclado0 -> valor;  // Este es el valor de value en la lógica de teclado, que mando desde el modulo teclado.v
    177c:	78 01 00 00 	mvhi r1,0x0
    1780:	38 21 19 3c 	ori r1,r1,0x193c
    1784:	28 21 00 00 	lw r1,(r1+0)
    1788:	28 21 00 00 	lw r1,(r1+0)
}
    178c:	20 21 00 ff 	andi r1,r1,0xff
    1790:	c3 a0 00 00 	ret

00001794 <i2c_read>:
 * I2C Functions
 */


uint32_t i2c_read(uint32_t slave_addr, uint32_t per_addr)
{
    1794:	78 03 00 00 	mvhi r3,0x0
    1798:	38 63 19 34 	ori r3,r3,0x1934
    179c:	28 64 00 00 	lw r4,(r3+0)
		
	while(!(i2c0->scr & I2C_DR));
    17a0:	28 83 00 00 	lw r3,(r4+0)
    17a4:	20 63 00 03 	andi r3,r3,0x3
    17a8:	44 60 ff fe 	be r3,r0,17a0 <i2c_read+0xc>
	i2c0->sdat = (slave_addr | per_addr<<8);
    17ac:	3c 42 00 08 	sli r2,r2,8
    17b0:	b8 41 08 00 	or r1,r2,r1
    17b4:	58 81 00 04 	sw (r4+4),r1
	return i2c0->sdat;
    17b8:	28 81 00 04 	lw r1,(r4+4)

}
    17bc:	c3 a0 00 00 	ret

000017c0 <i2c_write>:

void i2c_write(uint32_t slave_addr, uint32_t per_addr, uint32_t data){
    17c0:	78 04 00 00 	mvhi r4,0x0
    17c4:	38 84 19 34 	ori r4,r4,0x1934
    17c8:	28 85 00 00 	lw r5,(r4+0)
	
	while(!(i2c0->scr & I2C_DR));
    17cc:	28 a4 00 00 	lw r4,(r5+0)
    17d0:	20 84 00 03 	andi r4,r4,0x3
    17d4:	44 80 ff fe 	be r4,r0,17cc <i2c_write+0xc>
	i2c0->sdat = (slave_addr | per_addr<<8 |data<<16);
    17d8:	3c 42 00 08 	sli r2,r2,8
    17dc:	3c 63 00 10 	sli r3,r3,16
    17e0:	b8 41 08 00 	or r1,r2,r1
    17e4:	b8 23 08 00 	or r1,r1,r3
    17e8:	58 a1 00 04 	sw (r5+4),r1

}
    17ec:	c3 a0 00 00 	ret
