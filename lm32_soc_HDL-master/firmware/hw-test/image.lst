
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c7c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000144  00000c7c  00000c7c  00000cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  00000dc0  00000dc0  00000e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000ddc  00000ddc  00000e30  2**2
                  ALLOC
  4 .debug_abbrev 000003f8  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b19  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000b3d  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000240  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000005b2  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000288  00000000  00000000  00003072  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000083  00000000  00000000  000032fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  0000337d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000349  00000000  00000000  000033bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00003706  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00003717  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 95 	calli 720 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0d e0 	ori gp,gp,0xde0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0d dc 	ori r1,r1,0xddc
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0e 60 	ori r3,r3,0xe60

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 01 52 	calli 684 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <setBit>:
#define    TReloadRegL      0x2D << 1
#define    TCounterValueRegH    0x2E << 1  // shows the 16-bit timer value
#define    TCounterValueRegL    0x2F << 1

void setBit(char reg, char mask)
{
 208:	37 9c ff f4 	addi sp,sp,-12
 20c:	5b 8b 00 0c 	sw (sp+12),r11
 210:	5b 8c 00 08 	sw (sp+8),r12
 214:	5b 9d 00 04 	sw (sp+4),ra
 218:	20 2b 00 ff 	andi r11,r1,0xff
	char tmp;
	tmp = spi_read(reg);
 21c:	b9 60 08 00 	mv r1,r11
#define    TReloadRegL      0x2D << 1
#define    TCounterValueRegH    0x2E << 1  // shows the 16-bit timer value
#define    TCounterValueRegL    0x2F << 1

void setBit(char reg, char mask)
{
 220:	20 4c 00 ff 	andi r12,r2,0xff
	char tmp;
	tmp = spi_read(reg);
 224:	f8 00 02 6e 	calli bdc <spi_read>
	spi_write(reg, tmp | mask);   
 228:	b8 2c 10 00 	or r2,r1,r12
 22c:	20 42 00 ff 	andi r2,r2,0xff
 230:	b9 60 08 00 	mv r1,r11
 234:	f8 00 02 7d 	calli c28 <spi_write>
}
 238:	2b 9d 00 04 	lw ra,(sp+4)
 23c:	2b 8b 00 0c 	lw r11,(sp+12)
 240:	2b 8c 00 08 	lw r12,(sp+8)
 244:	37 9c 00 0c 	addi sp,sp,12
 248:	c3 a0 00 00 	ret

0000024c <clearBit>:

void clearBit(char reg, char mask)
{
 24c:	37 9c ff f4 	addi sp,sp,-12
 250:	5b 8b 00 0c 	sw (sp+12),r11
 254:	5b 8c 00 08 	sw (sp+8),r12
 258:	5b 9d 00 04 	sw (sp+4),ra
 25c:	20 2b 00 ff 	andi r11,r1,0xff
	char tmp;
	tmp = spi_read(reg);
 260:	b9 60 08 00 	mv r1,r11
	tmp = spi_read(reg);
	spi_write(reg, tmp | mask);   
}

void clearBit(char reg, char mask)
{
 264:	20 4c 00 ff 	andi r12,r2,0xff
	char tmp;
	tmp = spi_read(reg);
 268:	f8 00 02 5d 	calli bdc <spi_read>
	spi_write(reg, tmp & (~mask));
 26c:	a5 80 10 00 	not r2,r12
 270:	a0 22 08 00 	and r1,r1,r2
 274:	20 22 00 ff 	andi r2,r1,0xff
 278:	b9 60 08 00 	mv r1,r11
 27c:	f8 00 02 6b 	calli c28 <spi_write>
}
 280:	2b 9d 00 04 	lw ra,(sp+4)
 284:	2b 8b 00 0c 	lw r11,(sp+12)
 288:	2b 8c 00 08 	lw r12,(sp+8)
 28c:	37 9c 00 0c 	addi sp,sp,12
 290:	c3 a0 00 00 	ret

00000294 <initRfidReader>:

void initRfidReader()
{
 294:	37 9c ff fc 	addi sp,sp,-4
 298:	5b 9d 00 04 	sw (sp+4),ra
	//Make Soft Reset
	spi_write(CommandReg, PCD_RESETPHASE);
 29c:	34 01 00 02 	mvi r1,2
 2a0:	34 02 00 0f 	mvi r2,15
 2a4:	f8 00 02 61 	calli c28 <spi_write>
	while (spi_read(CommandReg) & (1<<4));
 2a8:	34 01 00 02 	mvi r1,2
 2ac:	f8 00 02 4c 	calli bdc <spi_read>
 2b0:	20 21 00 10 	andi r1,r1,0x10
 2b4:	5c 20 ff fd 	bne r1,r0,2a8 <initRfidReader+0x14>
        //Wait until the PCD finish reseting
	

	spi_write(TModeReg, 0x8D );      //Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 2b8:	34 01 00 54 	mvi r1,84
 2bc:	34 02 00 8d 	mvi r2,141
 2c0:	f8 00 02 5a 	calli c28 <spi_write>
	spi_write( TPrescalerReg, 0x3E );//TModeReg[3..0] + TPrescalerReg
 2c4:	34 01 00 56 	mvi r1,86
 2c8:	34 02 00 3e 	mvi r2,62
 2cc:	f8 00 02 57 	calli c28 <spi_write>
	spi_write( TReloadRegL, 0x30 );           
 2d0:	34 01 00 5a 	mvi r1,90
 2d4:	34 02 00 30 	mvi r2,48
 2d8:	f8 00 02 54 	calli c28 <spi_write>
	spi_write( TReloadRegH, 0x0 );   //WWWWWWWWWARNING: colocar ambo ceros o revisar que hace el registro
 2dc:	34 01 00 58 	mvi r1,88
 2e0:	34 02 00 00 	mvi r2,0
 2e4:	f8 00 02 51 	calli c28 <spi_write>
	spi_write( TxAutoReg, 0x40 );    //100%ASK
 2e8:	34 01 00 2a 	mvi r1,42
 2ec:	34 02 00 40 	mvi r2,64
 2f0:	f8 00 02 4e 	calli c28 <spi_write>
	spi_write( ModeReg, 0x3D );
 2f4:	34 01 00 22 	mvi r1,34
 2f8:	34 02 00 3d 	mvi r2,61
 2fc:	f8 00 02 4b 	calli c28 <spi_write>

	//AntennaON
	setBit( TxControlReg, 0x03 );
 300:	34 01 00 28 	mvi r1,40
 304:	34 02 00 03 	mvi r2,3
 308:	fb ff ff c0 	calli 208 <setBit>
	
	//FINISH INIT 
}
 30c:	2b 9d 00 04 	lw ra,(sp+4)
 310:	37 9c 00 04 	addi sp,sp,4
 314:	c3 a0 00 00 	ret

00000318 <loop>:

void loop()
{
 318:	37 9c ff e0 	addi sp,sp,-32
 31c:	5b 8b 00 20 	sw (sp+32),r11
 320:	5b 8c 00 1c 	sw (sp+28),r12
 324:	5b 8d 00 18 	sw (sp+24),r13
 328:	5b 8e 00 14 	sw (sp+20),r14
 32c:	5b 8f 00 10 	sw (sp+16),r15
 330:	5b 90 00 0c 	sw (sp+12),r16
 334:	5b 91 00 08 	sw (sp+8),r17
 338:	5b 9d 00 04 	sw (sp+4),ra
	//Begin Testing
	uart_putstr("Iniciando prueba....");
 33c:	78 01 00 00 	mvhi r1,0x0
 340:	38 21 0c 7c 	ori r1,r1,0xc7c
	uart_putstr("\n\r");
 344:	78 0b 00 00 	mvhi r11,0x0
}

void loop()
{
	//Begin Testing
	uart_putstr("Iniciando prueba....");
 348:	f8 00 01 7b 	calli 934 <uart_putstr>
	uart_putstr("\n\r");
 34c:	39 6b 0c 94 	ori r11,r11,0xc94
 350:	b9 60 08 00 	mv r1,r11
 354:	f8 00 01 78 	calli 934 <uart_putstr>
	msleep(3000);
 358:	34 01 0b b8 	mvi r1,3000
 35c:	f8 00 01 21 	calli 7e0 <msleep>

	uart_putstr("Estoy bien");
 360:	78 01 00 00 	mvhi r1,0x0
 364:	38 21 0c 98 	ori r1,r1,0xc98
 368:	f8 00 01 73 	calli 934 <uart_putstr>
	//IS_CARD
	//REQUEST

	spi_write( BitFramingReg, 0x07 );
 36c:	34 01 00 1a 	mvi r1,26
 370:	34 02 00 07 	mvi r2,7
 374:	f8 00 02 2d 	calli c28 <spi_write>

	//TO_CARD
	char irqEn = 0x77;
	//Serial.println(irqEn, HEX);
	spi_write( ComIEnReg, irqEn | 0x80 );
 378:	34 01 00 04 	mvi r1,4
 37c:	34 02 00 f7 	mvi r2,247
 380:	f8 00 02 2a 	calli c28 <spi_write>
	clearBit( ComIrqReg, 0x80 );
 384:	34 01 00 08 	mvi r1,8
 388:	34 02 00 80 	mvi r2,128
 38c:	fb ff ff b0 	calli 24c <clearBit>
	setBit( FIFOLevelReg, 0x80 );
 390:	34 01 00 14 	mvi r1,20
 394:	34 02 00 80 	mvi r2,128
 398:	fb ff ff 9c 	calli 208 <setBit>
	spi_write( CommandReg, PCD_IDLE );
 39c:	34 01 00 02 	mvi r1,2
 3a0:	34 02 00 00 	mvi r2,0
 3a4:	f8 00 02 21 	calli c28 <spi_write>
	spi_write( FIFODataReg, 0x26 );   //Escribiendo
 3a8:	34 01 00 12 	mvi r1,18
 3ac:	34 02 00 26 	mvi r2,38
 3b0:	f8 00 02 1e 	calli c28 <spi_write>
	spi_write( CommandReg, PCD_TRANSCEIVE );
 3b4:	34 01 00 02 	mvi r1,2
 3b8:	34 02 00 0c 	mvi r2,12
 3bc:	f8 00 02 1b 	calli c28 <spi_write>
	setBit( BitFramingReg, 0x80 );
 3c0:	34 01 00 1a 	mvi r1,26
 3c4:	34 02 00 80 	mvi r2,128
 3c8:	fb ff ff 90 	calli 208 <setBit>

	char flag = 1;
	while(flag)
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 3cc:	34 01 00 08 	mvi r1,8
 3d0:	f8 00 02 03 	calli bdc <spi_read>
 3d4:	b8 20 68 00 	mv r13,r1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 3d8:	21 ac 00 01 	andi r12,r13,0x1
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 3dc:	34 01 00 01 	mvi r1,1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 3e0:	5d 80 00 0a 	bne r12,r0,408 <loop+0xf0>
	char n;
	char waitIrq = 0x30;


	char flag = 1;
	while(flag)
 3e4:	21 ad 00 30 	andi r13,r13,0x30
		if(n & 0x01)
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 3e8:	f8 00 00 fe 	calli 7e0 <msleep>
	char n;
	char waitIrq = 0x30;


	char flag = 1;
	while(flag)
 3ec:	5d ac 00 09 	bne r13,r12,410 <loop+0xf8>
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 3f0:	34 01 00 08 	mvi r1,8
 3f4:	f8 00 01 fa 	calli bdc <spi_read>
 3f8:	b8 20 68 00 	mv r13,r1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 3fc:	21 ac 00 01 	andi r12,r13,0x1
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 400:	34 01 00 01 	mvi r1,1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 404:	45 80 ff f8 	be r12,r0,3e4 <loop+0xcc>
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 408:	34 01 00 01 	mvi r1,1
 40c:	f8 00 00 f5 	calli 7e0 <msleep>

	}
	
	flag=1;

	clearBit ( BitFramingReg, 0x80 );
 410:	34 02 00 80 	mvi r2,128
 414:	34 01 00 1a 	mvi r1,26
 418:	fb ff ff 8d 	calli 24c <clearBit>
	char lec;
	lec = spi_read( ErrorReg);
 41c:	34 01 00 0c 	mvi r1,12
 420:	f8 00 01 ef 	calli bdc <spi_read>
		//Serial.println("status=MI_OK, todo va bien");
		if ( n & irqEn & 0x01 )     // WARNING: Parece ser otra lectura de un posible error, pero pues
			//Serial.println("status=NOTAGERR, NO todo va bien");
	}*/
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
 424:	34 01 00 14 	mvi r1,20
 428:	f8 00 01 ed 	calli bdc <spi_read>
 42c:	b8 20 80 00 	mv r16,r1
	
	uart_putstr("la cantidad de datos en el primer ciclo,n a leer es:  ");
 430:	78 01 00 00 	mvhi r1,0x0
 434:	38 21 0c a4 	ori r1,r1,0xca4
 438:	f8 00 01 3f 	calli 934 <uart_putstr>
	uart_putchar(n+48);
 43c:	36 01 00 30 	addi r1,r16,48
 440:	20 21 00 ff 	andi r1,r1,0xff
 444:	f8 00 01 52 	calli 98c <uart_putchar>
	uart_putstr("\n\r");
 448:	b9 60 08 00 	mv r1,r11
	uart_putstr("-------");
 44c:	78 11 00 00 	mvhi r17,0x0
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
	
	uart_putstr("la cantidad de datos en el primer ciclo,n a leer es:  ");
	uart_putchar(n+48);
	uart_putstr("\n\r");
 450:	f8 00 01 39 	calli 934 <uart_putstr>
	uart_putstr("-------");
 454:	3a 31 0c dc 	ori r17,r17,0xcdc
 458:	ba 20 08 00 	mv r1,r17
 45c:	f8 00 01 36 	calli 934 <uart_putstr>
	uart_putstr("\n\r");
 460:	b9 60 08 00 	mv r1,r11
 464:	f8 00 01 34 	calli 934 <uart_putstr>
	
	char i=0;
	
	while (i<n)
 468:	46 00 00 1e 	be r16,r0,4e0 <loop+0x1c8>
 46c:	78 0c 00 00 	mvhi r12,0x0
 470:	34 0d 00 00 	mvi r13,0
 474:	39 8c 0c e4 	ori r12,r12,0xce4
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
 478:	34 0f 00 09 	mvi r15,9
	
	char i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
 47c:	34 01 00 12 	mvi r1,18
 480:	f8 00 01 d7 	calli bdc <spi_read>
 484:	b8 20 70 00 	mv r14,r1
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
 488:	b9 80 08 00 	mv r1,r12
 48c:	f8 00 01 2a 	calli 934 <uart_putstr>
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
 490:	01 c2 00 04 	srui r2,r14,4
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
 494:	21 c3 00 0f 	andi r3,r14,0xf
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
 498:	20 42 00 ff 	andi r2,r2,0xff
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;
 49c:	34 44 00 37 	addi r4,r2,55
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
 4a0:	34 45 00 30 	addi r5,r2,48
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
 4a4:	34 6e 00 37 	addi r14,r3,55
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
 4a8:	54 6f 00 02 	bgu r3,r15,4b0 <loop+0x198>
			firstDigit=firstDigit+48;
 4ac:	34 6e 00 30 	addi r14,r3,48
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;
 4b0:	20 83 00 ff 	andi r3,r4,0xff
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
 4b4:	54 4f 00 02 	bgu r2,r15,4bc <loop+0x1a4>
			secondDigit=secondDigit+48;
 4b8:	20 a3 00 ff 	andi r3,r5,0xff
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
 4bc:	b8 60 08 00 	mv r1,r3
 4c0:	f8 00 01 33 	calli 98c <uart_putchar>
		uart_putchar(firstDigit);
 4c4:	b9 c0 08 00 	mv r1,r14
 4c8:	f8 00 01 31 	calli 98c <uart_putchar>
		uart_putstr("\n\r");
		
		i=i+1;
 4cc:	35 ad 00 01 	addi r13,r13,1
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
		uart_putchar(firstDigit);
		uart_putstr("\n\r");
 4d0:	b9 60 08 00 	mv r1,r11
		
		i=i+1;
 4d4:	21 ad 00 ff 	andi r13,r13,0xff
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
		uart_putchar(firstDigit);
		uart_putstr("\n\r");
 4d8:	f8 00 01 17 	calli 934 <uart_putstr>
	uart_putstr("-------");
	uart_putstr("\n\r");
	
	char i=0;
	
	while (i<n)
 4dc:	56 0d ff e8 	bgu r16,r13,47c <loop+0x164>
	//FIN IS_CARD

	//READ_CARD_SERIAL

	//ANTICOLL
	spi_write( BitFramingReg, 0x00 );
 4e0:	34 01 00 1a 	mvi r1,26
 4e4:	34 02 00 00 	mvi r2,0
 4e8:	f8 00 01 d0 	calli c28 <spi_write>
	clearBit( Status2Reg, 0x08 );     //WARGNING: no presente en anterior ejemplo del cuaderno, tal vez puede ser omitido
 4ec:	34 01 00 10 	mvi r1,16
 4f0:	34 02 00 08 	mvi r2,8
 4f4:	fb ff ff 56 	calli 24c <clearBit>
	
	
	//TO_CARD

	spi_write( ComIEnReg, irqEn | 0x80 );
 4f8:	34 01 00 04 	mvi r1,4
 4fc:	34 02 00 f7 	mvi r2,247
 500:	f8 00 01 ca 	calli c28 <spi_write>
	clearBit( ComIrqReg, 0x80 );
 504:	34 01 00 08 	mvi r1,8
 508:	34 02 00 80 	mvi r2,128
 50c:	fb ff ff 50 	calli 24c <clearBit>
	setBit( FIFOLevelReg, 0x80 );
 510:	34 01 00 14 	mvi r1,20
 514:	34 02 00 80 	mvi r2,128
 518:	fb ff ff 3c 	calli 208 <setBit>
	spi_write( CommandReg, PCD_IDLE );
 51c:	34 01 00 02 	mvi r1,2
 520:	34 02 00 00 	mvi r2,0
 524:	f8 00 01 c1 	calli c28 <spi_write>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
 528:	34 01 00 12 	mvi r1,18
 52c:	34 02 00 93 	mvi r2,147
 530:	f8 00 01 be 	calli c28 <spi_write>
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
 534:	34 01 00 12 	mvi r1,18
 538:	34 02 00 20 	mvi r2,32
 53c:	f8 00 01 bb 	calli c28 <spi_write>
	spi_write( CommandReg, PCD_TRANSCEIVE );
 540:	34 01 00 02 	mvi r1,2
 544:	34 02 00 0c 	mvi r2,12
 548:	f8 00 01 b8 	calli c28 <spi_write>
	setBit( BitFramingReg, 0x80 );
 54c:	34 01 00 1a 	mvi r1,26
 550:	34 02 00 80 	mvi r2,128
 554:	fb ff ff 2d 	calli 208 <setBit>
	
	while(flag)
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 558:	34 01 00 08 	mvi r1,8
 55c:	f8 00 01 a0 	calli bdc <spi_read>
 560:	b8 20 68 00 	mv r13,r1
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 564:	21 ac 00 01 	andi r12,r13,0x1
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 568:	34 01 00 01 	mvi r1,1
		n =spi_read( ComIrqReg );
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 56c:	5d 80 00 0a 	bne r12,r0,594 <loop+0x27c>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
	spi_write( CommandReg, PCD_TRANSCEIVE );
	setBit( BitFramingReg, 0x80 );
	
	while(flag)
 570:	21 ad 00 30 	andi r13,r13,0x30
		if(n & 0x01){
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 574:	f8 00 00 9b 	calli 7e0 <msleep>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
	spi_write( CommandReg, PCD_TRANSCEIVE );
	setBit( BitFramingReg, 0x80 );
	
	while(flag)
 578:	5d ac 00 09 	bne r13,r12,59c <loop+0x284>
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 57c:	34 01 00 08 	mvi r1,8
 580:	f8 00 01 97 	calli bdc <spi_read>
 584:	b8 20 68 00 	mv r13,r1
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 588:	21 ac 00 01 	andi r12,r13,0x1
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 58c:	34 01 00 01 	mvi r1,1
		n =spi_read( ComIrqReg );
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 590:	45 80 ff f8 	be r12,r0,570 <loop+0x258>
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 594:	34 01 00 01 	mvi r1,1
 598:	f8 00 00 92 	calli 7e0 <msleep>
	}
	
	flag = 1;

	clearBit( BitFramingReg, 0x80 );
 59c:	34 02 00 80 	mvi r2,128
 5a0:	34 01 00 1a 	mvi r1,26
 5a4:	fb ff ff 2a 	calli 24c <clearBit>

		if ( n & irqEn & 0x01 )// WWWWWWWWARNING: Parece ser otra lectura de un posible error, pero pues
			Serial.println("status=NOTAGERR, NO todo va bien");
	}*/
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
 5a8:	34 01 00 14 	mvi r1,20
 5ac:	f8 00 01 8c 	calli bdc <spi_read>
 5b0:	b8 20 80 00 	mv r16,r1
	
	uart_putstr("la cantidad de datos n a leer es:  ");
 5b4:	78 01 00 00 	mvhi r1,0x0
 5b8:	38 21 0d 10 	ori r1,r1,0xd10
 5bc:	f8 00 00 de 	calli 934 <uart_putstr>
	uart_putchar(n+48);
 5c0:	36 01 00 30 	addi r1,r16,48
 5c4:	20 21 00 ff 	andi r1,r1,0xff
 5c8:	f8 00 00 f1 	calli 98c <uart_putchar>
	uart_putstr("\n\r");
 5cc:	b9 60 08 00 	mv r1,r11
 5d0:	f8 00 00 d9 	calli 934 <uart_putstr>
	uart_putstr("-------");
 5d4:	ba 20 08 00 	mv r1,r17
 5d8:	f8 00 00 d7 	calli 934 <uart_putstr>
	uart_putstr("\n\r");	
 5dc:	b9 60 08 00 	mv r1,r11
 5e0:	f8 00 00 d5 	calli 934 <uart_putstr>

	i=0;
	
	while (i<n)
 5e4:	46 00 00 1e 	be r16,r0,65c <loop+0x344>
 5e8:	78 0c 00 00 	mvhi r12,0x0
 5ec:	34 0d 00 00 	mvi r13,0
 5f0:	39 8c 0c e4 	ori r12,r12,0xce4
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
 5f4:	34 0f 00 09 	mvi r15,9

	i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
 5f8:	34 01 00 12 	mvi r1,18
 5fc:	f8 00 01 78 	calli bdc <spi_read>
 600:	b8 20 70 00 	mv r14,r1
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
 604:	b9 80 08 00 	mv r1,r12
 608:	f8 00 00 cb 	calli 934 <uart_putstr>
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
 60c:	01 c2 00 04 	srui r2,r14,4
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
 610:	21 c3 00 0f 	andi r3,r14,0xf
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
 614:	20 42 00 ff 	andi r2,r2,0xff
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;
 618:	34 44 00 37 	addi r4,r2,55
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
 61c:	34 41 00 30 	addi r1,r2,48
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
 620:	34 6e 00 37 	addi r14,r3,55
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
 624:	54 6f 00 02 	bgu r3,r15,62c <loop+0x314>
			firstDigit=firstDigit+48;
 628:	34 6e 00 30 	addi r14,r3,48
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;
 62c:	20 83 00 ff 	andi r3,r4,0xff
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
 630:	54 4f 00 02 	bgu r2,r15,638 <loop+0x320>
			secondDigit=secondDigit+48;
 634:	20 23 00 ff 	andi r3,r1,0xff
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
 638:	b8 60 08 00 	mv r1,r3
 63c:	f8 00 00 d4 	calli 98c <uart_putchar>
		uart_putchar(firstDigit);
 640:	b9 c0 08 00 	mv r1,r14
 644:	f8 00 00 d2 	calli 98c <uart_putchar>
		uart_putstr("\n\r");
		
		i=i+1;
 648:	35 ad 00 01 	addi r13,r13,1
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
		uart_putchar(firstDigit);
		uart_putstr("\n\r");
 64c:	b9 60 08 00 	mv r1,r11
		
		i=i+1;
 650:	21 ad 00 ff 	andi r13,r13,0xff
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
		uart_putchar(firstDigit);
		uart_putstr("\n\r");
 654:	f8 00 00 b8 	calli 934 <uart_putstr>
	uart_putstr("-------");
	uart_putstr("\n\r");	

	i=0;
	
	while (i<n)
 658:	56 0d ff e8 	bgu r16,r13,5f8 <loop+0x2e0>
	//byte validBits;
	validBits = Rd(ControlReg) & 0x07; //Ver nro de bits validos
	Serial.print("Bits validos");Serial.print(validBits, BIN);
	Serial.println();
	*/
}
 65c:	2b 9d 00 04 	lw ra,(sp+4)
 660:	2b 8b 00 20 	lw r11,(sp+32)
 664:	2b 8c 00 1c 	lw r12,(sp+28)
 668:	2b 8d 00 18 	lw r13,(sp+24)
 66c:	2b 8e 00 14 	lw r14,(sp+20)
 670:	2b 8f 00 10 	lw r15,(sp+16)
 674:	2b 90 00 0c 	lw r16,(sp+12)
 678:	2b 91 00 08 	lw r17,(sp+8)
 67c:	37 9c 00 20 	addi sp,sp,32
 680:	c3 a0 00 00 	ret

00000684 <main>:

int main()
{
 684:	37 9c ff ec 	addi sp,sp,-20
 688:	5b 8b 00 14 	sw (sp+20),r11
 68c:	5b 8c 00 10 	sw (sp+16),r12
 690:	5b 8d 00 0c 	sw (sp+12),r13
 694:	5b 8e 00 08 	sw (sp+8),r14
 698:	5b 9d 00 04 	sw (sp+4),ra
 69c:	78 0e 00 00 	mvhi r14,0x0
 6a0:	78 0b 00 00 	mvhi r11,0x0
 6a4:	78 0c 00 00 	mvhi r12,0x0
	initRfidReader();
 6a8:	fb ff fe fb 	calli 294 <initRfidReader>
 6ac:	39 ce 0d 34 	ori r14,r14,0xd34
 6b0:	39 6b 0c 94 	ori r11,r11,0xc94
 6b4:	39 8c 0d 50 	ori r12,r12,0xd50
	char n;	

	while(1)
	{
		n=uart_getchar();
		if(n=='s')
 6b8:	34 0d 00 73 	mvi r13,115
 6bc:	e0 00 00 05 	bi 6d0 <main+0x4c>
			uart_putstr("\n\r");
			loop();
		}
		else
		{
			uart_putstr("Invalid command");
 6c0:	b9 80 08 00 	mv r1,r12
 6c4:	f8 00 00 9c 	calli 934 <uart_putstr>
			uart_putstr("\n\r");
 6c8:	b9 60 08 00 	mv r1,r11
 6cc:	f8 00 00 9a 	calli 934 <uart_putstr>
	initRfidReader();
	char n;	

	while(1)
	{
		n=uart_getchar();
 6d0:	f8 00 00 a6 	calli 968 <uart_getchar>
		if(n=='s')
 6d4:	5c 2d ff fb 	bne r1,r13,6c0 <main+0x3c>
		{
			uart_putstr("Valid Command, begin loop");
 6d8:	b9 c0 08 00 	mv r1,r14
 6dc:	f8 00 00 96 	calli 934 <uart_putstr>
			uart_putstr("\n\r");
 6e0:	b9 60 08 00 	mv r1,r11
 6e4:	f8 00 00 94 	calli 934 <uart_putstr>
			loop();
 6e8:	fb ff ff 0c 	calli 318 <loop>
 6ec:	e3 ff ff f9 	bi 6d0 <main+0x4c>

000006f0 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 6f0:	c3 a0 00 00 	ret

000006f4 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 6f4:	78 01 00 00 	mvhi r1,0x0
 6f8:	38 21 0e 5c 	ori r1,r1,0xe5c
 6fc:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 700:	78 02 00 00 	mvhi r2,0x0
 704:	38 42 0d c4 	ori r2,r2,0xdc4
 708:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 70c:	34 63 00 01 	addi r3,r3,1
 710:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 714:	34 01 00 0e 	mvi r1,14
 718:	58 41 00 00 	sw (r2+0),r1
}
 71c:	c3 a0 00 00 	ret

00000720 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 720:	37 9c ff f0 	addi sp,sp,-16
 724:	5b 8b 00 10 	sw (sp+16),r11
 728:	5b 8c 00 0c 	sw (sp+12),r12
 72c:	5b 8d 00 08 	sw (sp+8),r13
 730:	5b 9d 00 04 	sw (sp+4),ra
 734:	78 0b 00 00 	mvhi r11,0x0
 738:	39 6b 0d dc 	ori r11,r11,0xddc
 73c:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 740:	35 6d 00 80 	addi r13,r11,128
 744:	e0 00 00 04 	bi 754 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 748:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 74c:	45 6d 00 08 	be r11,r13,76c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 750:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 754:	21 81 00 01 	andi r1,r12,0x1
 758:	44 20 ff fc 	be r1,r0,748 <irq_handler+0x28>
 75c:	29 61 00 00 	lw r1,(r11+0)
 760:	35 6b 00 04 	addi r11,r11,4
 764:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 768:	5d 6d ff fa 	bne r11,r13,750 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 76c:	2b 9d 00 04 	lw ra,(sp+4)
 770:	2b 8b 00 10 	lw r11,(sp+16)
 774:	2b 8c 00 0c 	lw r12,(sp+12)
 778:	2b 8d 00 08 	lw r13,(sp+8)
 77c:	37 9c 00 10 	addi sp,sp,16
 780:	c3 a0 00 00 	ret

00000784 <isr_init>:

void isr_init()
{
 784:	78 01 00 00 	mvhi r1,0x0
 788:	78 02 00 00 	mvhi r2,0x0
 78c:	38 21 0d dc 	ori r1,r1,0xddc
 790:	38 42 06 f0 	ori r2,r2,0x6f0
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 794:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 798:	58 22 00 00 	sw (r1+0),r2
 79c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 7a0:	5c 23 ff fe 	bne r1,r3,798 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 7a4:	c3 a0 00 00 	ret

000007a8 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 7a8:	78 03 00 00 	mvhi r3,0x0
 7ac:	3c 21 00 02 	sli r1,r1,2
 7b0:	38 63 0d dc 	ori r3,r3,0xddc
 7b4:	b4 61 18 00 	add r3,r3,r1
 7b8:	58 62 00 00 	sw (r3+0),r2
}
 7bc:	c3 a0 00 00 	ret

000007c0 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 7c0:	78 03 00 00 	mvhi r3,0x0
 7c4:	3c 21 00 02 	sli r1,r1,2
 7c8:	38 63 0d dc 	ori r3,r3,0xddc
 7cc:	78 02 00 00 	mvhi r2,0x0
 7d0:	b4 61 18 00 	add r3,r3,r1
 7d4:	38 42 06 f0 	ori r2,r2,0x6f0
 7d8:	58 62 00 00 	sw (r3+0),r2
}
 7dc:	c3 a0 00 00 	ret

000007e0 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 7e0:	78 04 00 00 	mvhi r4,0x0
 7e4:	38 84 0d 60 	ori r4,r4,0xd60
 7e8:	28 83 00 00 	lw r3,(r4+0)
 7ec:	78 02 00 00 	mvhi r2,0x0
 7f0:	38 42 0d c4 	ori r2,r2,0xdc4
 7f4:	28 42 00 00 	lw r2,(r2+0)
 7f8:	88 23 08 00 	mul r1,r1,r3
 7fc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 800:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 804:	34 01 00 08 	mvi r1,8
 808:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 80c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 810:	20 21 00 01 	andi r1,r1,0x1
 814:	44 20 ff fe 	be r1,r0,80c <msleep+0x2c>
}
 818:	c3 a0 00 00 	ret

0000081c <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 81c:	78 02 00 00 	mvhi r2,0x0
 820:	38 42 0d c4 	ori r2,r2,0xdc4
 824:	28 42 00 00 	lw r2,(r2+0)
 828:	08 21 00 64 	muli r1,r1,100
 82c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 830:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 834:	34 01 00 08 	mvi r1,8
 838:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 83c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 840:	20 21 00 01 	andi r1,r1,0x1
 844:	44 20 ff fe 	be r1,r0,83c <nsleep+0x20>
}
 848:	c3 a0 00 00 	ret

0000084c <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 84c:	78 01 00 00 	mvhi r1,0x0
 850:	38 21 0d c4 	ori r1,r1,0xdc4
 854:	28 23 00 00 	lw r3,(r1+0)
 858:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 85c:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 860:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 864:	38 21 0e 5c 	ori r1,r1,0xe5c

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 868:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 86c:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 870:	78 02 00 00 	mvhi r2,0x0
 874:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 878:	34 04 00 0e 	mvi r4,14
 87c:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 880:	38 21 0d dc 	ori r1,r1,0xddc
 884:	38 42 06 f4 	ori r2,r2,0x6f4
 888:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 88c:	c3 a0 00 00 	ret

00000890 <wifi_getchar2>:
		if (c ==':'){
			c = uart_one_getchar();
			return c;
		}
	}
	return '\n';
 890:	78 01 00 00 	mvhi r1,0x0
 894:	38 21 0d cc 	ori r1,r1,0xdcc
 898:	28 22 00 00 	lw r2,(r1+0)
}
																																																																																																																																																																																																																																																																																																																			
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 89c:	34 03 00 00 	mvi r3,0
		c = uart_one_getchar();
		if (c ==':'){
 8a0:	34 04 00 3a 	mvi r4,58
}
																																																																																																																																																																																																																																																																																																																			
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 8a4:	34 05 00 14 	mvi r5,20
}


char uart_one_getchar()
{   
	while (! (uart1->ucr & UART_DR)) ;   // Me toca poner las variables para el UART1 ojo!!!
 8a8:	28 41 00 00 	lw r1,(r2+0)
 8ac:	20 21 00 01 	andi r1,r1,0x1
 8b0:	44 20 ff fe 	be r1,r0,8a8 <wifi_getchar2+0x18>
	return uart1->rxtx;
 8b4:	28 41 00 04 	lw r1,(r2+4)
}
																																																																																																																																																																																																																																																																																																																			
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 8b8:	34 63 00 01 	addi r3,r3,1
		c = uart_one_getchar();
		if (c ==':'){
 8bc:	20 21 00 ff 	andi r1,r1,0xff
 8c0:	44 24 00 04 	be r1,r4,8d0 <wifi_getchar2+0x40>
}
																																																																																																																																																																																																																																																																																																																			
char wifi_getchar2(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 8c4:	5c 65 ff f9 	bne r3,r5,8a8 <wifi_getchar2+0x18>
		if (c ==':'){
			c = uart_one_getchar();
			return c;
		}
	}
	return '\n';
 8c8:	34 01 00 0a 	mvi r1,10
}
 8cc:	c3 a0 00 00 	ret
}


char uart_one_getchar()
{   
	while (! (uart1->ucr & UART_DR)) ;   // Me toca poner las variables para el UART1 ojo!!!
 8d0:	28 41 00 00 	lw r1,(r2+0)
 8d4:	20 21 00 01 	andi r1,r1,0x1
 8d8:	44 20 ff fe 	be r1,r0,8d0 <wifi_getchar2+0x40>
	return uart1->rxtx;
 8dc:	28 41 00 04 	lw r1,(r2+4)
 8e0:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_one_getchar();
		if (c ==':'){
			c = uart_one_getchar();
			return c;
 8e4:	c3 a0 00 00 	ret

000008e8 <ok>:
		a = uart_one_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 8e8:	78 01 00 00 	mvhi r1,0x0
 8ec:	38 21 0d cc 	ori r1,r1,0xdcc
 8f0:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 8f4:	34 03 00 00 	mvi r3,0
		a = uart_one_getchar();
		if(a=='K'){
 8f8:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 8fc:	34 05 00 1e 	mvi r5,30
}


char uart_one_getchar()
{   
	while (! (uart1->ucr & UART_DR)) ;   // Me toca poner las variables para el UART1 ojo!!!
 900:	28 41 00 00 	lw r1,(r2+0)
 904:	20 21 00 01 	andi r1,r1,0x1
 908:	44 20 ff fe 	be r1,r0,900 <ok+0x18>
	return uart1->rxtx;
 90c:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 910:	34 63 00 01 	addi r3,r3,1
		a = uart_one_getchar();
		if(a=='K'){
 914:	20 21 00 ff 	andi r1,r1,0xff
 918:	44 24 00 04 	be r1,r4,928 <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 91c:	5c 65 ff f9 	bne r3,r5,900 <ok+0x18>
		a = uart_one_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 920:	34 01 00 00 	mvi r1,0
 924:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a = uart_one_getchar();
		if(a=='K'){
			return 1;
 928:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
 92c:	c3 a0 00 00 	ret

00000930 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 930:	c3 a0 00 00 	ret

00000934 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 934:	40 24 00 00 	lbu r4,(r1+0)
 938:	44 80 00 0b 	be r4,r0,964 <uart_putstr+0x30>
 93c:	78 02 00 00 	mvhi r2,0x0
 940:	38 42 0d c0 	ori r2,r2,0xdc0
 944:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 948:	28 62 00 00 	lw r2,(r3+0)
 94c:	20 42 00 10 	andi r2,r2,0x10
 950:	5c 40 ff fe 	bne r2,r0,948 <uart_putstr+0x14>
	uart0->rxtx = c;
 954:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 958:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 95c:	40 24 00 00 	lbu r4,(r1+0)
 960:	5c 82 ff fa 	bne r4,r2,948 <uart_putstr+0x14>
 964:	c3 a0 00 00 	ret

00000968 <uart_getchar>:
		c++;
	}
}

char uart_getchar()
{   
 968:	78 01 00 00 	mvhi r1,0x0
 96c:	38 21 0d c0 	ori r1,r1,0xdc0
 970:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 974:	28 41 00 00 	lw r1,(r2+0)
 978:	20 21 00 01 	andi r1,r1,0x1
 97c:	44 20 ff fe 	be r1,r0,974 <uart_getchar+0xc>
	return uart0->rxtx;
 980:	28 41 00 04 	lw r1,(r2+4)
}
 984:	20 21 00 ff 	andi r1,r1,0xff
 988:	c3 a0 00 00 	ret

0000098c <uart_putchar>:

void uart_putchar(char c)
{
 98c:	78 02 00 00 	mvhi r2,0x0
 990:	38 42 0d c0 	ori r2,r2,0xdc0
 994:	28 43 00 00 	lw r3,(r2+0)
 998:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 99c:	28 62 00 00 	lw r2,(r3+0)
 9a0:	20 42 00 10 	andi r2,r2,0x10
 9a4:	5c 40 ff fe 	bne r2,r0,99c <uart_putchar+0x10>
	uart0->rxtx = c;
 9a8:	58 61 00 04 	sw (r3+4),r1
}
 9ac:	c3 a0 00 00 	ret

000009b0 <uart_gen_putchar>:
		c++;
	}
}

void uart_gen_putchar(char c)
{
 9b0:	78 02 00 00 	mvhi r2,0x0
 9b4:	38 42 0d c0 	ori r2,r2,0xdc0
 9b8:	28 44 00 00 	lw r4,(r2+0)
 9bc:	20 21 00 ff 	andi r1,r1,0xff
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 9c0:	28 82 00 00 	lw r2,(r4+0)
 9c4:	20 42 00 10 	andi r2,r2,0x10
 9c8:	5c 40 ff fe 	bne r2,r0,9c0 <uart_gen_putchar+0x10>
	uart0->rxtx = c;
 9cc:	78 02 00 00 	mvhi r2,0x0
 9d0:	38 42 0d cc 	ori r2,r2,0xdcc
 9d4:	28 43 00 00 	lw r3,(r2+0)
 9d8:	58 81 00 04 	sw (r4+4),r1
	 uart_one_putchar(c);
}

void uart_one_putchar(char c)
{
	while (uart1->ucr & UART_BUSY) ;  // Me toca poner las variables para el UART1 ojo!!!
 9dc:	28 62 00 00 	lw r2,(r3+0)
 9e0:	20 42 00 10 	andi r2,r2,0x10
 9e4:	5c 40 ff fe 	bne r2,r0,9dc <uart_gen_putchar+0x2c>
	uart1->rxtx = c;
 9e8:	58 61 00 04 	sw (r3+4),r1

void uart_gen_putchar(char c)
{
	 uart_putchar(c);
	 uart_one_putchar(c);
}
 9ec:	c3 a0 00 00 	ret

000009f0 <uart_gen_putstr>:
//Esto lo modifico para el moódulo WIFI
//***************************


void uart_gen_putstr(char *str)
{
 9f0:	37 9c ff f8 	addi sp,sp,-8
 9f4:	5b 8b 00 08 	sw (sp+8),r11
 9f8:	5b 9d 00 04 	sw (sp+4),ra
 9fc:	b8 20 58 00 	mv r11,r1
	char *c = str;
	while(*c) {
 a00:	40 21 00 00 	lbu r1,(r1+0)
 a04:	44 20 00 05 	be r1,r0,a18 <uart_gen_putstr+0x28>
		uart_gen_putchar(*c);
		c++;
 a08:	35 6b 00 01 	addi r11,r11,1

void uart_gen_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_gen_putchar(*c);
 a0c:	fb ff ff e9 	calli 9b0 <uart_gen_putchar>


void uart_gen_putstr(char *str)
{
	char *c = str;
	while(*c) {
 a10:	41 61 00 00 	lbu r1,(r11+0)
 a14:	5c 20 ff fd 	bne r1,r0,a08 <uart_gen_putstr+0x18>
		uart_gen_putchar(*c);
		c++;
	}
}
 a18:	2b 9d 00 04 	lw ra,(sp+4)
 a1c:	2b 8b 00 08 	lw r11,(sp+8)
 a20:	37 9c 00 08 	addi sp,sp,8
 a24:	c3 a0 00 00 	ret

00000a28 <init_wifi>:

/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
 a28:	37 9c ff f8 	addi sp,sp,-8
 a2c:	5b 8b 00 08 	sw (sp+8),r11
 a30:	5b 9d 00 04 	sw (sp+4),ra

	uart_gen_putstr("AT+RST\r\n");
 a34:	78 01 00 00 	mvhi r1,0x0
 a38:	38 21 0d 64 	ori r1,r1,0xd64
 a3c:	fb ff ff ed 	calli 9f0 <uart_gen_putstr>
	msleep(200);
 a40:	34 01 00 c8 	mvi r1,200
 a44:	78 0b 00 00 	mvhi r11,0x0
 a48:	fb ff ff 66 	calli 7e0 <msleep>
 a4c:	39 6b 0d 70 	ori r11,r11,0xd70
	int c = 0;
	while(c==0){
		uart_gen_putstr("AT+CIPMUX=1\r\n");
 a50:	b9 60 08 00 	mv r1,r11
 a54:	fb ff ff e7 	calli 9f0 <uart_gen_putstr>
		c = ok();
 a58:	fb ff ff a4 	calli 8e8 <ok>
void init_wifi(){ //configurar el modulo como estación con puerto 80

	uart_gen_putstr("AT+RST\r\n");
	msleep(200);
	int c = 0;
	while(c==0){
 a5c:	44 20 ff fd 	be r1,r0,a50 <init_wifi+0x28>
		uart_gen_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	msleep(10);
 a60:	34 01 00 0a 	mvi r1,10
 a64:	fb ff ff 5f 	calli 7e0 <msleep>
	uart_gen_putstr("hast");
 a68:	78 01 00 00 	mvhi r1,0x0
 a6c:	38 21 0d 80 	ori r1,r1,0xd80
 a70:	78 0b 00 00 	mvhi r11,0x0
 a74:	fb ff ff df 	calli 9f0 <uart_gen_putstr>
 a78:	39 6b 0d 88 	ori r11,r11,0xd88
	c = 0;
	while (c==0){
		uart_gen_putstr("AT+CIPSERVER=1,80\r\n");
 a7c:	b9 60 08 00 	mv r1,r11
 a80:	fb ff ff dc 	calli 9f0 <uart_gen_putstr>
		c = ok();
 a84:	fb ff ff 99 	calli 8e8 <ok>
		c = ok();
	}
	msleep(10);
	uart_gen_putstr("hast");
	c = 0;
	while (c==0){
 a88:	44 20 ff fd 	be r1,r0,a7c <init_wifi+0x54>
		uart_gen_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}
 a8c:	2b 9d 00 04 	lw ra,(sp+4)
 a90:	2b 8b 00 08 	lw r11,(sp+8)
 a94:	37 9c 00 08 	addi sp,sp,8
 a98:	c3 a0 00 00 	ret

00000a9c <wifi_putchar2>:

void wifi_putchar2(char a){
 a9c:	37 9c ff f0 	addi sp,sp,-16
 aa0:	5b 8b 00 10 	sw (sp+16),r11
 aa4:	5b 8c 00 0c 	sw (sp+12),r12
 aa8:	5b 8d 00 08 	sw (sp+8),r13
 aac:	5b 9d 00 04 	sw (sp+4),ra
 ab0:	78 0c 00 00 	mvhi r12,0x0
 ab4:	20 2d 00 ff 	andi r13,r1,0xff
 ab8:	39 8c 0d 9c 	ori r12,r12,0xd9c
	int c = 0; 	  
	while(c == 0){
		uart_gen_putstr("AT+CIPSEND=0,1\r\n");
 abc:	b9 80 08 00 	mv r1,r12
 ac0:	fb ff ff cc 	calli 9f0 <uart_gen_putstr>
		msleep(10);
 ac4:	34 01 00 0a 	mvi r1,10
 ac8:	fb ff ff 46 	calli 7e0 <msleep>
		uart_gen_putchar(a);
 acc:	b9 a0 08 00 	mv r1,r13
 ad0:	fb ff ff b8 	calli 9b0 <uart_gen_putchar>
		c = ok();
 ad4:	fb ff ff 85 	calli 8e8 <ok>
 ad8:	b8 20 58 00 	mv r11,r1
		msleep(100);
 adc:	34 01 00 64 	mvi r1,100
 ae0:	fb ff ff 40 	calli 7e0 <msleep>
	}
}

void wifi_putchar2(char a){
	int c = 0; 	  
	while(c == 0){
 ae4:	45 60 ff f6 	be r11,r0,abc <wifi_putchar2+0x20>
 ae8:	78 0b 00 00 	mvhi r11,0x0
 aec:	39 6b 0d b0 	ori r11,r11,0xdb0
		c = ok();
		msleep(100);
	}
	c = 0; 	  
	while(c == 0){
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
 af0:	b9 60 08 00 	mv r1,r11
 af4:	fb ff ff bf 	calli 9f0 <uart_gen_putstr>
		c = ok();
 af8:	fb ff ff 7c 	calli 8e8 <ok>
		uart_gen_putchar(a);
		c = ok();
		msleep(100);
	}
	c = 0; 	  
	while(c == 0){
 afc:	44 20 ff fd 	be r1,r0,af0 <wifi_putchar2+0x54>
		uart_gen_putstr("AT+CIPCLOSE=0\r\n");
		c = ok();
	}
}
 b00:	2b 9d 00 04 	lw ra,(sp+4)
 b04:	2b 8b 00 10 	lw r11,(sp+16)
 b08:	2b 8c 00 0c 	lw r12,(sp+12)
 b0c:	2b 8d 00 08 	lw r13,(sp+8)
 b10:	37 9c 00 10 	addi sp,sp,16
 b14:	c3 a0 00 00 	ret

00000b18 <uart_one_putchar>:
	 uart_putchar(c);
	 uart_one_putchar(c);
}

void uart_one_putchar(char c)
{
 b18:	78 02 00 00 	mvhi r2,0x0
 b1c:	38 42 0d cc 	ori r2,r2,0xdcc
 b20:	28 43 00 00 	lw r3,(r2+0)
 b24:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;  // Me toca poner las variables para el UART1 ojo!!!
 b28:	28 62 00 00 	lw r2,(r3+0)
 b2c:	20 42 00 10 	andi r2,r2,0x10
 b30:	5c 40 ff fe 	bne r2,r0,b28 <uart_one_putchar+0x10>
	uart1->rxtx = c;
 b34:	58 61 00 04 	sw (r3+4),r1
}
 b38:	c3 a0 00 00 	ret

00000b3c <uart_one_getchar>:


char uart_one_getchar()
{   
 b3c:	78 01 00 00 	mvhi r1,0x0
 b40:	38 21 0d cc 	ori r1,r1,0xdcc
 b44:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;   // Me toca poner las variables para el UART1 ojo!!!
 b48:	28 41 00 00 	lw r1,(r2+0)
 b4c:	20 21 00 01 	andi r1,r1,0x1
 b50:	44 20 ff fe 	be r1,r0,b48 <uart_one_getchar+0xc>
	return uart1->rxtx;
 b54:	28 41 00 04 	lw r1,(r2+4)
}
 b58:	20 21 00 ff 	andi r1,r1,0xff
 b5c:	c3 a0 00 00 	ret

00000b60 <gpio_get_in>:
 * GPIO Functions
 */

	char gpio_get_in()
	{
	return gpio0->gpio_in;
 b60:	78 01 00 00 	mvhi r1,0x0
 b64:	38 21 0d c8 	ori r1,r1,0xdc8
 b68:	28 21 00 00 	lw r1,(r1+0)
 b6c:	28 21 00 00 	lw r1,(r1+0)
	}//gpio_in
 b70:	20 21 00 ff 	andi r1,r1,0xff
 b74:	c3 a0 00 00 	ret

00000b78 <gpio_set_o>:

	void gpio_set_o(char g)
	{
	gpio0->gpio_o=g;
 b78:	78 02 00 00 	mvhi r2,0x0
 b7c:	38 42 0d c8 	ori r2,r2,0xdc8
 b80:	28 42 00 00 	lw r2,(r2+0)
	{
	return gpio0->gpio_in;
	}//gpio_in

	void gpio_set_o(char g)
	{
 b84:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->gpio_o=g;
 b88:	58 41 00 04 	sw (r2+4),r1
	}//gpio_o
 b8c:	c3 a0 00 00 	ret

00000b90 <gpio_get_dir>:

	char gpio_get_dir()
	{
	return gpio0->gpio_dir;
 b90:	78 01 00 00 	mvhi r1,0x0
 b94:	38 21 0d c8 	ori r1,r1,0xdc8
 b98:	28 21 00 00 	lw r1,(r1+0)
 b9c:	28 21 00 08 	lw r1,(r1+8)
	}//gpio_dir
 ba0:	20 21 00 ff 	andi r1,r1,0xff
 ba4:	c3 a0 00 00 	ret

00000ba8 <gpio_set_dir>:
	
	void gpio_set_dir(char g)
	{
	gpio0->gpio_dir=g;
 ba8:	78 02 00 00 	mvhi r2,0x0
 bac:	38 42 0d c8 	ori r2,r2,0xdc8
 bb0:	28 42 00 00 	lw r2,(r2+0)
	{
	return gpio0->gpio_dir;
	}//gpio_dir
	
	void gpio_set_dir(char g)
	{
 bb4:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->gpio_dir=g;
 bb8:	58 41 00 08 	sw (r2+8),r1
	}//gpio_dir
 bbc:	c3 a0 00 00 	ret

00000bc0 <spi_start>:
 * SPI Functions
 */
//These are the specific funtions for the RC522 rfid reader card
void spi_start()
{
	spi0->ucr=0x1;
 bc0:	78 01 00 00 	mvhi r1,0x0
 bc4:	38 21 0d d0 	ori r1,r1,0xdd0
 bc8:	28 21 00 00 	lw r1,(r1+0)
 bcc:	34 02 00 01 	mvi r2,1
 bd0:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
 bd4:	58 20 00 00 	sw (r1+0),r0
}
 bd8:	c3 a0 00 00 	ret

00000bdc <spi_read>:
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
	regAddress = regAddress << 8;
 bdc:	78 02 00 00 	mvhi r2,0x0
	spi0->ucr=0x0;
}
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
 be0:	20 21 00 7e 	andi r1,r1,0x7e
	regAddress = regAddress << 8;
 be4:	38 42 0d d0 	ori r2,r2,0xdd0
	spi0->ucr=0x0;
}
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
 be8:	38 23 00 80 	ori r3,r1,0x80
	regAddress = regAddress << 8;
 bec:	28 41 00 00 	lw r1,(r2+0)
 bf0:	3c 63 00 08 	sli r3,r3,8
	while(spi0->ucr & SPI_BUSY);
 bf4:	28 22 00 00 	lw r2,(r1+0)
 bf8:	20 42 00 02 	andi r2,r2,0x2
 bfc:	5c 40 ff fe 	bne r2,r0,bf4 <spi_read+0x18>
	spi0->data_in= regAddress;
 c00:	58 23 00 04 	sw (r1+4),r3
 * SPI Functions
 */
//These are the specific funtions for the RC522 rfid reader card
void spi_start()
{
	spi0->ucr=0x1;
 c04:	34 02 00 01 	mvi r2,1
 c08:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
 c0c:	58 20 00 00 	sw (r1+0),r0
	uint32_t regAddress = (0x80 | (reg & 0x7E));
	regAddress = regAddress << 8;
	while(spi0->ucr & SPI_BUSY);
	spi0->data_in= regAddress;
	spi_start();
	while(spi0->ucr & SPI_BUSY);
 c10:	28 22 00 00 	lw r2,(r1+0)
 c14:	20 42 00 02 	andi r2,r2,0x2
 c18:	5c 40 ff fe 	bne r2,r0,c10 <spi_read+0x34>
	
	return spi0->data_out;	
 c1c:	28 21 00 08 	lw r1,(r1+8)
}
 c20:	20 21 00 ff 	andi r1,r1,0xff
 c24:	c3 a0 00 00 	ret

00000c28 <spi_write>:
void spi_write (char reg, char value)
{
	//reg=reg<<1;
	uint32_t regAddress=(reg & 0x7E);
 c28:	20 21 00 7e 	andi r1,r1,0x7e
	regAddress = regAddress << 8;
 c2c:	3c 24 00 08 	sli r4,r1,8
	uint32_t data0 = regAddress | value;
 c30:	78 03 00 00 	mvhi r3,0x0
 c34:	38 63 0d d0 	ori r3,r3,0xdd0
	while(spi0->ucr & SPI_BUSY);
	
	return spi0->data_out;	
}
void spi_write (char reg, char value)
{
 c38:	20 42 00 ff 	andi r2,r2,0xff
	//reg=reg<<1;
	uint32_t regAddress=(reg & 0x7E);
	regAddress = regAddress << 8;
	uint32_t data0 = regAddress | value;
 c3c:	28 61 00 00 	lw r1,(r3+0)
 c40:	b8 82 18 00 	or r3,r4,r2
	while(spi0->ucr & SPI_BUSY);
 c44:	28 22 00 00 	lw r2,(r1+0)
 c48:	20 42 00 02 	andi r2,r2,0x2
 c4c:	5c 40 ff fe 	bne r2,r0,c44 <spi_write+0x1c>
	spi0->data_in=data0;
 c50:	58 23 00 04 	sw (r1+4),r3
 * SPI Functions
 */
//These are the specific funtions for the RC522 rfid reader card
void spi_start()
{
	spi0->ucr=0x1;
 c54:	34 02 00 01 	mvi r2,1
 c58:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
 c5c:	58 20 00 00 	sw (r1+0),r0
	regAddress = regAddress << 8;
	uint32_t data0 = regAddress | value;
	while(spi0->ucr & SPI_BUSY);
	spi0->data_in=data0;
	spi_start();
}
 c60:	c3 a0 00 00 	ret

00000c64 <leer_teclado>:
 * TECLADO MATRICIAL
 */

char leer_teclado()     // creo que el retorno siempre es char.
{
	return teclado0 -> valor;  // Este es el valor de value en la lógica de teclado, que mando desde el modulo teclado.v
 c64:	78 01 00 00 	mvhi r1,0x0
 c68:	38 21 0d d4 	ori r1,r1,0xdd4
 c6c:	28 21 00 00 	lw r1,(r1+0)
 c70:	28 21 00 00 	lw r1,(r1+0)
}
 c74:	20 21 00 ff 	andi r1,r1,0xff
 c78:	c3 a0 00 00 	ret
